From 3c1c8d73d753898921b2f147f1d9cafe258fbaff Mon Sep 17 00:00:00 2001
From: doson200220 <153179873+doson200220@users.noreply.github.com>
Date: Thu, 1 May 2025 21:08:57 +0700
Subject: [PATCH] Update Wallet issue fix

---
 next.config.mjs                               |   10 +
 .../[locale]/clinicManager/branch/page.tsx    |    8 +-
 .../clinicManager/configuration/page.tsx      |    7 +
 src/app/[locale]/clinicManager/inbox/page.tsx |  876 ++++++-----
 src/app/[locale]/clinicManager/layout.tsx     |    6 +-
 src/app/[locale]/clinicManager/order/page.tsx |   36 +-
 .../[locale]/clinicManager/wallet/page.tsx    |   61 +-
 .../clinicStaff/customer-schedule/page.tsx    |   10 +-
 src/app/[locale]/systemAdmin/user/page.tsx    |   86 +-
 src/components/clinicManager/AddProcedure.tsx |  311 ++--
 .../clinicManager/EditServiceForm.tsx         |   13 +-
 .../configs/create-shift-dialog.tsx           |   53 +
 .../configs/delete-shift-dialog.tsx           |  113 ++
 .../configs/edit-shift-dialog.tsx             |   58 +
 .../clinicManager/configs/shift-table.tsx     |  277 +---
 .../service/view-service-modal.tsx            | 1299 ++++++++++-------
 .../wallet/withdrawal-request-modal.tsx       |    3 +-
 .../schedule-change-for-customer.tsx          |    2 +-
 .../clinicStaff/order/order-detail-dialog.tsx |    4 +-
 src/components/common/Admin/Sidebar.tsx       |    1 -
 .../common/Pagination/Pagination.tsx          |   10 +-
 src/components/login/first-login-flow.tsx     |  124 +-
 src/components/systemAdmin/ModalService.tsx   |   80 +-
 src/components/ui/confirmation-dialogv2.tsx   |  126 ++
 src/components/ui/tabs.tsx                    |   24 +-
 src/config/i18n/messages/en/chat.ts           |   19 +
 .../i18n/messages/en/clinicStaffService.ts    |    6 +-
 .../i18n/messages/en/customerSchedule.ts      |    1 +
 src/config/i18n/messages/en/login.ts          |   23 +-
 src/config/i18n/messages/en/package.ts        |    2 +-
 src/config/i18n/messages/en/wallet.ts         |    1 +
 src/config/i18n/messages/types/chat.ts        |   63 +-
 .../i18n/messages/types/clinicStaffService.ts |    5 +-
 .../i18n/messages/types/customerSchedule.ts   |    1 +
 src/config/i18n/messages/types/login.ts       |   21 +
 src/config/i18n/messages/types/wallet.ts      |    1 +
 src/config/i18n/messages/vi/chat.ts           |   19 +
 .../i18n/messages/vi/clinicStaffService.ts    |    7 +-
 .../i18n/messages/vi/customerSchedule.ts      |    4 +-
 src/config/i18n/messages/vi/login.ts          |   20 +
 src/config/i18n/messages/vi/package.ts        |    2 +-
 src/config/i18n/messages/vi/wallet.ts         |    1 +
 src/constants/route.constant.ts               |    1 +
 43 files changed, 2309 insertions(+), 1486 deletions(-)
 create mode 100644 src/components/clinicManager/configs/create-shift-dialog.tsx
 create mode 100644 src/components/clinicManager/configs/delete-shift-dialog.tsx
 create mode 100644 src/components/clinicManager/configs/edit-shift-dialog.tsx
 create mode 100644 src/components/ui/confirmation-dialogv2.tsx

diff --git a/next.config.mjs b/next.config.mjs
index e531f90..4d85c84 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -19,6 +19,16 @@ const nextConfig = {
       "picsum.photos",
       "vietqr.net",
     ],
+    remotePatterns: [
+      {
+        protocol: "https",
+        hostname: "**",
+      },
+      {
+        protocol: "http",
+        hostname: "**",
+      },
+    ],
   },
   reactStrictMode: false,
   env: {
diff --git a/src/app/[locale]/clinicManager/branch/page.tsx b/src/app/[locale]/clinicManager/branch/page.tsx
index d10c36b..d9a50f3 100644
--- a/src/app/[locale]/clinicManager/branch/page.tsx
+++ b/src/app/[locale]/clinicManager/branch/page.tsx
@@ -82,7 +82,7 @@ const BranchesList: React.FC = () => {
   const currentBranchCount = allBranches.length;
 
   // Check if branch limit is reached
-  const isBranchLimitReached = currentBranchCount >= branchLimit;
+  const isBranchLimitReached = branchLimit <= 0;
 
   // Filter branches based on search term
   const filteredBranches = useMemo(() => {
@@ -279,15 +279,15 @@ const BranchesList: React.FC = () => {
           </span>
           <span
             className={`font-bold ${
-              isBranchLimitReached
+              branchLimit <= 0
                 ? "text-red-500 dark:text-red-400"
                 : "text-green-500 dark:text-green-400"
             }`}
           >
-            {currentBranchCount} / {branchLimit}
+            {branchLimit > 0 ? branchLimit : 0}
           </span>
         </div>
-        {isBranchLimitReached && (
+        {branchLimit <= 0 && (
           <div className="flex items-center gap-2 text-amber-600 dark:text-amber-400">
             <AlertCircle className="h-4 w-4" />
             <span className="text-sm font-medium">
diff --git a/src/app/[locale]/clinicManager/configuration/page.tsx b/src/app/[locale]/clinicManager/configuration/page.tsx
index 1560187..765c183 100644
--- a/src/app/[locale]/clinicManager/configuration/page.tsx
+++ b/src/app/[locale]/clinicManager/configuration/page.tsx
@@ -25,6 +25,13 @@ export default function ConfigsContent() {
       className="w-full"
     >
       <TabsList className="bg-purple-100/50 dark:bg-purple-900/10 p-1 rounded-xl">
+        <TabsTrigger
+          value="shifts"
+          className="data-[state=active]:bg-white dark:data-[state=active]:bg-purple-800/10 data-[state=active]:text-purple-800 dark:data-[state=active]:text-purple-300"
+        >
+          <Clock className="h-4 w-4 mr-2" />
+          {t("shifts.title")}
+        </TabsTrigger>
         {/* Additional tabs can be added here */}
       </TabsList>
       <TabsContent value="shifts" className="mt-6">
diff --git a/src/app/[locale]/clinicManager/inbox/page.tsx b/src/app/[locale]/clinicManager/inbox/page.tsx
index 41bba33..210e99c 100644
--- a/src/app/[locale]/clinicManager/inbox/page.tsx
+++ b/src/app/[locale]/clinicManager/inbox/page.tsx
@@ -1,13 +1,14 @@
-"use client"
-import { useCallback, useEffect, useRef, useState } from "react"
-import type React from "react"
-
-import * as signalR from "@microsoft/signalr"
-import { Button } from "@/components/ui/button"
-import { Input } from "@/components/ui/input"
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
-import { ScrollArea } from "@/components/ui/scroll-area"
-import { v4 as uuidv4 } from "uuid"
+"use client";
+import { useCallback, useEffect, useRef, useState } from "react";
+import type React from "react";
+import { useTranslations } from "next-intl";
+
+import * as signalR from "@microsoft/signalr";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { ScrollArea } from "@/components/ui/scroll-area";
+import { v4 as uuidv4 } from "uuid";
 import {
   Send,
   MessageSquare,
@@ -17,61 +18,78 @@ import {
   ChevronLeft,
   MoreVertical,
   Smile,
-  ImageIcon,
-  Paperclip,
-  Phone,
-  Video,
   X,
   Download,
-} from "lucide-react"
-import { useGetAllConversationQuery, useGetAllMessageConversationQuery } from "@/features/inbox/api"
-import { getAccessToken, GetDataByToken, type TokenData } from "@/utils"
-import type { Conversation, Message } from "@/features/inbox/types"
-import { Badge } from "@/components/ui/badge"
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
-import { Skeleton } from "@/components/ui/skeleton"
-import EmojiPicker from "emoji-picker-react"
-import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
-import Image from "next/image"
-import { toast } from "react-toastify"
-import { Progress } from "@/components/ui/progress"
+} from "lucide-react";
+import {
+  useGetAllConversationQuery,
+  useGetAllMessageConversationQuery,
+} from "@/features/inbox/api";
+import { getAccessToken, GetDataByToken, type TokenData } from "@/utils";
+import type { Conversation, Message } from "@/features/inbox/types";
+import { Badge } from "@/components/ui/badge";
+import {
+  Tooltip,
+  TooltipContent,
+  TooltipProvider,
+  TooltipTrigger,
+} from "@/components/ui/tooltip";
+import { Skeleton } from "@/components/ui/skeleton";
+import EmojiPicker from "emoji-picker-react";
+import {
+  Popover,
+  PopoverContent,
+  PopoverTrigger,
+} from "@/components/ui/popover";
+import Image from "next/image";
+import { toast } from "react-toastify";
+import { Progress } from "@/components/ui/progress";
 
 // Extended Message type to support different content types
 interface ExtendedMessage extends Message {
-  contentType?: "text" | "image" | "file" | "emoji"
-  fileUrl?: string
-  fileName?: string
-  fileSize?: number
-  fileType?: string
+  contentType?: "text" | "image" | "file" | "emoji";
+  fileUrl?: string;
+  fileName?: string;
+  fileSize?: number;
+  fileType?: string;
 }
 
 interface ConversationNotification {
-  conversationId: string
-  newMessageCount: number
+  conversationId: string;
+  newMessageCount: number;
 }
 
 export default function ChatScreen() {
-  const [inputMessage, setInputMessage] = useState("")
-  const signalRef = useRef<signalR.HubConnection | null>(null)
-  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null)
-  const token = getAccessToken() as string
-  const { clinicId } = GetDataByToken(token) as TokenData
-  const [messages, setMessages] = useState<ExtendedMessage[]>([])
-  const [conversationNotification, setConversationNotification] = useState<ConversationNotification[]>([])
-  const chatContainerRef = useRef<HTMLDivElement>(null)
-  const [searchTerm, setSearchTerm] = useState("")
-  const [showMobileConversations, setShowMobileConversations] = useState(true)
-  const inputRef = useRef<HTMLInputElement>(null)
-  const fileInputRef = useRef<HTMLInputElement>(null)
-  const imageInputRef = useRef<HTMLInputElement>(null)
-  const [showEmojiPicker, setShowEmojiPicker] = useState(false)
-  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({})
-  const [isUploading, setIsUploading] = useState(false)
-
-  const { data, isLoading: isLoadingConversations } = useGetAllConversationQuery({
-    entityId: clinicId as string,
-    isClinic: true,
-  })
+  // Get translations using the useTranslations hook
+  const t = useTranslations("chat");
+
+  const [inputMessage, setInputMessage] = useState("");
+  const signalRef = useRef<signalR.HubConnection | null>(null);
+  const [selectedConversation, setSelectedConversation] =
+    useState<Conversation | null>(null);
+  const token = getAccessToken() as string;
+  const { clinicId } = GetDataByToken(token) as TokenData;
+  const [messages, setMessages] = useState<ExtendedMessage[]>([]);
+  const [conversationNotification, setConversationNotification] = useState<
+    ConversationNotification[]
+  >([]);
+  const chatContainerRef = useRef<HTMLDivElement>(null);
+  const [searchTerm, setSearchTerm] = useState("");
+  const [showMobileConversations, setShowMobileConversations] = useState(true);
+  const inputRef = useRef<HTMLInputElement>(null);
+  const fileInputRef = useRef<HTMLInputElement>(null);
+  const imageInputRef = useRef<HTMLInputElement>(null);
+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
+  const [uploadProgress, setUploadProgress] = useState<{
+    [key: string]: number;
+  }>({});
+  const [isUploading, setIsUploading] = useState(false);
+
+  const { data, isLoading: isLoadingConversations } =
+    useGetAllConversationQuery({
+      entityId: clinicId as string,
+      isClinic: true,
+    });
 
   const {
     data: messageData,
@@ -83,22 +101,25 @@ export default function ChatScreen() {
     },
     {
       skip: !selectedConversation?.conversationId,
-    },
-  )
+    }
+  );
 
   useEffect(() => {
     const newConnection = new signalR.HubConnectionBuilder()
-      .withUrl(`https://api.beautify.asia/signaling-api/ChatHub?clinicId=${clinicId}&type=1`, {
-        skipNegotiation: true,
-        transport: signalR.HttpTransportType.WebSockets,
-      })
+      .withUrl(
+        `https://api.beautify.asia/signaling-api/ChatHub?clinicId=${clinicId}&type=1`,
+        {
+          skipNegotiation: true,
+          transport: signalR.HttpTransportType.WebSockets,
+        }
+      )
       .withAutomaticReconnect()
       .configureLogging(signalR.LogLevel.Information)
       .withHubProtocol(new signalR.JsonHubProtocol())
-      .build()
+      .build();
 
-    signalRef.current = newConnection
-  }, [clinicId])
+    signalRef.current = newConnection;
+  }, [clinicId]);
 
   useEffect(() => {
     if (messageData && messageData.value) {
@@ -106,14 +127,14 @@ export default function ChatScreen() {
       const extendedMessages = messageData.value.map((msg: Message) => {
         // Try to determine if the content is a JSON string containing file or image info
         try {
-          const parsedContent = JSON.parse(msg.content)
+          const parsedContent = JSON.parse(msg.content);
           if (parsedContent.type === "image") {
             return {
               ...msg,
               contentType: "image",
               fileUrl: parsedContent.url,
               fileName: parsedContent.name,
-            } as ExtendedMessage
+            } as ExtendedMessage;
           } else if (parsedContent.type === "file") {
             return {
               ...msg,
@@ -122,13 +143,13 @@ export default function ChatScreen() {
               fileName: parsedContent.name,
               fileSize: parsedContent.size,
               fileType: parsedContent.fileType,
-            } as ExtendedMessage
+            } as ExtendedMessage;
           } else if (parsedContent.type === "emoji") {
             return {
               ...msg,
               contentType: "emoji",
               content: parsedContent.emoji,
-            } as ExtendedMessage
+            } as ExtendedMessage;
           }
         } catch (e) {
           // Not JSON, treat as regular text
@@ -137,115 +158,127 @@ export default function ChatScreen() {
         return {
           ...msg,
           contentType: "text",
-        } as ExtendedMessage
-      })
+        } as ExtendedMessage;
+      });
 
-      setMessages(extendedMessages)
+      setMessages(extendedMessages);
     }
-  }, [messageData])
+  }, [messageData]);
 
   useEffect(() => {
     if (signalRef.current != null && selectedConversation == null) {
       signalRef.current
         .start()
         .then(() => {
-          console.log("SignalR connected")
+          console.log("SignalR connected");
         })
         .catch((err) => {
-          console.error("SignalR connection failed:", err)
-        })
+          console.error("SignalR connection failed:", err);
+        });
     }
 
     const handleReceiveMessage = (_sender: any, message: Message) => {
-      const newMessage = message as ExtendedMessage
+      const newMessage = message as ExtendedMessage;
 
       // Try to determine if the content is a JSON string containing file or image info
       try {
-        const parsedContent = JSON.parse(newMessage.content)
+        const parsedContent = JSON.parse(newMessage.content);
         if (parsedContent.type === "image") {
-          newMessage.contentType = "image"
-          newMessage.fileUrl = parsedContent.url
-          newMessage.fileName = parsedContent.name
+          newMessage.contentType = "image";
+          newMessage.fileUrl = parsedContent.url;
+          newMessage.fileName = parsedContent.name;
         } else if (parsedContent.type === "file") {
-          newMessage.contentType = "file"
-          newMessage.fileUrl = parsedContent.url
-          newMessage.fileName = parsedContent.name
-          newMessage.fileSize = parsedContent.size
-          newMessage.fileType = parsedContent.fileType
+          newMessage.contentType = "file";
+          newMessage.fileUrl = parsedContent.url;
+          newMessage.fileName = parsedContent.name;
+          newMessage.fileSize = parsedContent.size;
+          newMessage.fileType = parsedContent.fileType;
         } else if (parsedContent.type === "emoji") {
-          newMessage.contentType = "emoji"
-          newMessage.content = parsedContent.emoji
+          newMessage.contentType = "emoji";
+          newMessage.content = parsedContent.emoji;
         }
       } catch (e) {
         // Not JSON, treat as regular text
-        newMessage.contentType = "text"
+        newMessage.contentType = "text";
       }
 
       if (selectedConversation?.conversationId !== newMessage.conversationId) {
         const notification: ConversationNotification = {
           conversationId: newMessage.conversationId,
           newMessageCount: 1,
-        }
+        };
         setConversationNotification((prevNotifications) => {
-          const existingNotification = prevNotifications.find((n) => n.conversationId === notification.conversationId)
+          const existingNotification = prevNotifications.find(
+            (n) => n.conversationId === notification.conversationId
+          );
           if (existingNotification) {
             return prevNotifications.map((n) =>
-              n.conversationId === notification.conversationId ? { ...n, newMessageCount: n.newMessageCount + 1 } : n,
-            )
+              n.conversationId === notification.conversationId
+                ? { ...n, newMessageCount: n.newMessageCount + 1 }
+                : n
+            );
           } else {
-            return [...prevNotifications, notification]
+            return [...prevNotifications, notification];
           }
-        })
+        });
       } else {
-        setMessages((prevMessages) => [...prevMessages, newMessage])
+        setMessages((prevMessages) => [...prevMessages, newMessage]);
       }
-    }
+    };
 
     if (signalRef.current != null && selectedConversation != null) {
-      signalRef.current.off("ReceiveMessage")
-      signalRef.current.on("ReceiveMessage", handleReceiveMessage)
+      signalRef.current.off("ReceiveMessage");
+      signalRef.current.on("ReceiveMessage", handleReceiveMessage);
     }
 
     return () => {
       if (signalRef.current != null) {
-        signalRef.current.off("ReceiveMessage")
+        signalRef.current.off("ReceiveMessage");
       }
-    }
-  }, [selectedConversation])
+    };
+  }, [selectedConversation]);
 
   useEffect(() => {
     if (data && data.value && data.value.length > 0) {
-      const initialConversation = data.value[0]
-      setSelectedConversation(initialConversation)
+      const initialConversation = data.value[0];
+      setSelectedConversation(initialConversation);
     }
-  }, [data])
+  }, [data]);
 
   const handleSelectedCoversation = (conversation: Conversation) => () => {
-    setSelectedConversation(conversation)
-    setShowMobileConversations(false)
+    setSelectedConversation(conversation);
+    setShowMobileConversations(false);
     setConversationNotification((prevNotifications) => {
-      const existingNotification = prevNotifications.find((n) => n.conversationId === conversation.conversationId)
+      const existingNotification = prevNotifications.find(
+        (n) => n.conversationId === conversation.conversationId
+      );
       if (existingNotification) {
         return prevNotifications.map((n) =>
-          n.conversationId === conversation.conversationId ? { ...n, newMessageCount: 0 } : n,
-        )
+          n.conversationId === conversation.conversationId
+            ? { ...n, newMessageCount: 0 }
+            : n
+        );
       } else {
-        return [...prevNotifications]
+        return [...prevNotifications];
       }
-    })
-  }
+    });
+  };
 
   useEffect(() => {
     if (selectedConversation?.conversationId) {
-      refetch()
+      refetch();
     }
-  }, [selectedConversation, refetch])
+  }, [selectedConversation, refetch]);
 
   const sendMessage = useCallback(
     (receiverId: string) =>
-      async (message: string, contentType: "text" | "image" | "file" | "emoji" = "text", fileData?: any) => {
+      async (
+        message: string,
+        contentType: "text" | "image" | "file" | "emoji" = "text",
+        fileData?: any
+      ) => {
         if (signalRef.current && receiverId && selectedConversation?.entityId) {
-          let messageContent = message
+          let messageContent = message;
 
           // Format message content based on type
           if (contentType === "image") {
@@ -253,7 +286,7 @@ export default function ChatScreen() {
               type: "image",
               url: fileData.url,
               name: fileData.name,
-            })
+            });
           } else if (contentType === "file") {
             messageContent = JSON.stringify({
               type: "file",
@@ -261,32 +294,42 @@ export default function ChatScreen() {
               name: fileData.name,
               size: fileData.size,
               fileType: fileData.type,
-            })
+            });
           } else if (contentType === "emoji") {
             messageContent = JSON.stringify({
               type: "emoji",
               emoji: message,
-            })
+            });
           }
 
-          await signalRef.current.invoke("SendMessage", clinicId, receiverId, true, messageContent)
+          await signalRef.current.invoke(
+            "SendMessage",
+            clinicId,
+            receiverId,
+            true,
+            messageContent
+          );
 
           const createTimestamp = (): string => {
-            const date = new Date()
-            const vietnamTimezoneOffset = 7 * 60 // 7 hours in minutes
-            const localTime = new Date(date.getTime() + vietnamTimezoneOffset * 60 * 1000)
-            const year = localTime.getUTCFullYear()
-            const month = String(localTime.getUTCMonth() + 1).padStart(2, "0")
-            const day = String(localTime.getUTCDate()).padStart(2, "0")
-            const hours = String(localTime.getUTCHours()).padStart(2, "0")
-            const minutes = String(localTime.getUTCMinutes()).padStart(2, "0")
-            const seconds = String(localTime.getUTCSeconds()).padStart(2, "0")
-            const milliseconds = Math.floor(localTime.getUTCMilliseconds() / 100)
-            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`
-          }
+            const date = new Date();
+            const vietnamTimezoneOffset = 7 * 60; // 7 hours in minutes
+            const localTime = new Date(
+              date.getTime() + vietnamTimezoneOffset * 60 * 1000
+            );
+            const year = localTime.getUTCFullYear();
+            const month = String(localTime.getUTCMonth() + 1).padStart(2, "0");
+            const day = String(localTime.getUTCDate()).padStart(2, "0");
+            const hours = String(localTime.getUTCHours()).padStart(2, "0");
+            const minutes = String(localTime.getUTCMinutes()).padStart(2, "0");
+            const seconds = String(localTime.getUTCSeconds()).padStart(2, "0");
+            const milliseconds = Math.floor(
+              localTime.getUTCMilliseconds() / 100
+            );
+            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}`;
+          };
 
-          const timestamp = createTimestamp()
-          const randomId = uuidv4()
+          const timestamp = createTimestamp();
+          const randomId = uuidv4();
 
           const newMessage: ExtendedMessage = {
             id: randomId,
@@ -298,89 +341,94 @@ export default function ChatScreen() {
             senderName: selectedConversation?.friendName as string,
             senderImageUrl: selectedConversation?.friendImageUrl as string,
             contentType: contentType,
-          }
+          };
 
           if (contentType === "image") {
-            newMessage.fileUrl = fileData.url
-            newMessage.fileName = fileData.name
+            newMessage.fileUrl = fileData.url;
+            newMessage.fileName = fileData.name;
           } else if (contentType === "file") {
-            newMessage.fileUrl = fileData.url
-            newMessage.fileName = fileData.name
-            newMessage.fileSize = fileData.size
-            newMessage.fileType = fileData.type
+            newMessage.fileUrl = fileData.url;
+            newMessage.fileName = fileData.name;
+            newMessage.fileSize = fileData.size;
+            newMessage.fileType = fileData.type;
           }
 
-          setMessages((prevMessages) => [...prevMessages, newMessage])
+          setMessages((prevMessages) => [...prevMessages, newMessage]);
         }
       },
-    [signalRef, selectedConversation, clinicId],
-  )
+    [signalRef, selectedConversation, clinicId]
+  );
 
   useEffect(() => {
     if (chatContainerRef.current) {
-      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight
+      chatContainerRef.current.scrollTop =
+        chatContainerRef.current.scrollHeight;
     }
-  }, [messages])
+  }, [messages]);
 
   const filteredConversations =
-    data?.value?.filter((conversation) => conversation.friendName.toLowerCase().includes(searchTerm.toLowerCase())) ||
-    []
+    data?.value?.filter((conversation) =>
+      conversation.friendName.toLowerCase().includes(searchTerm.toLowerCase())
+    ) || [];
 
   const formatTime = (dateString: string) => {
-    const date = new Date(dateString)
+    const date = new Date(dateString);
     return date.toLocaleString("vi-VN", {
       hour: "2-digit",
       minute: "2-digit",
-    })
-  }
+    });
+  };
 
   const formatDate = (dateString: string) => {
-    const date = new Date(dateString)
+    const date = new Date(dateString);
     return date.toLocaleString("vi-VN", {
       year: "numeric",
       month: "long",
       day: "numeric",
-    })
-  }
+    });
+  };
 
   const handleBackToConversations = () => {
-    setShowMobileConversations(true)
-  }
+    setShowMobileConversations(true);
+  };
 
   const focusInput = () => {
     if (inputRef.current) {
-      inputRef.current.focus()
+      inputRef.current.focus();
     }
-  }
+  };
 
   const handleEmojiClick = (emojiData: any) => {
     if (selectedConversation) {
-      sendMessage(selectedConversation.entityId)(emojiData.emoji, "emoji")
-      setShowEmojiPicker(false)
+      sendMessage(selectedConversation.entityId)(emojiData.emoji, "emoji");
+      setShowEmojiPicker(false);
     }
-  }
+  };
 
-  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>, type: "file" | "image") => {
-    const files = event.target.files
-    if (!files || files.length === 0 || !selectedConversation) return
+  const handleFileSelect = async (
+    event: React.ChangeEvent<HTMLInputElement>,
+    type: "file" | "image"
+  ) => {
+    const files = event.target.files;
+    if (!files || files.length === 0 || !selectedConversation) return;
 
-    const file = files[0]
-    const fileId = uuidv4()
+    const file = files[0];
+    const fileId = uuidv4();
 
     // Mock upload progress
-    setIsUploading(true)
-    setUploadProgress((prev) => ({ ...prev, [fileId]: 0 }))
+    setIsUploading(true);
+    setUploadProgress((prev) => ({ ...prev, [fileId]: 0 }));
 
     try {
       // Simulate file upload with progress
       for (let i = 0; i <= 100; i += 10) {
-        setUploadProgress((prev) => ({ ...prev, [fileId]: i }))
-        await new Promise((resolve) => setTimeout(resolve, 200))
+        setUploadProgress((prev) => ({ ...prev, [fileId]: i }));
+        await new Promise((resolve) => setTimeout(resolve, 200));
       }
 
       // In a real implementation, you would upload the file to your server or cloud storage
       // and get back a URL. For this demo, we'll create an object URL.
-      const fileUrl = URL.createObjectURL(file)
+      const fileUrl = URL.createObjectURL(file);
 
       // Send the message with file data
       await sendMessage(selectedConversation.entityId)(file.name, type, {
@@ -388,46 +436,65 @@ export default function ChatScreen() {
         name: file.name,
         size: file.size,
         type: file.type,
-      })
+      });
 
-      toast.success(`${type === "image" ? "Hình ảnh" : "Tệp tin"} đã được gửi thành công`)
+      toast.success(
+        type === "image"
+          ? t("fileUpload.imageSuccess")
+          : t("fileUpload.fileSuccess")
+      );
     } catch (error) {
-      console.error("Error uploading file:", error)
-      toast.error(`Không thể gửi ${type === "image" ? "hình ảnh" : "tệp tin"}`)
+      console.error("Error uploading file:", error);
+      toast.error(
+        type === "image"
+          ? t("fileUpload.imageError")
+          : t("fileUpload.fileError")
+      );
     } finally {
-      setIsUploading(false)
+      setIsUploading(false);
       setUploadProgress((prev) => {
-        const newProgress = { ...prev }
-        delete newProgress[fileId]
-        return newProgress
-      })
+        const newProgress = { ...prev };
+        delete newProgress[fileId];
+        return newProgress;
+      });
 
       // Reset the file input
       if (type === "file" && fileInputRef.current) {
-        fileInputRef.current.value = ""
+        fileInputRef.current.value = "";
       } else if (type === "image" && imageInputRef.current) {
-        imageInputRef.current.value = ""
+        imageInputRef.current.value = "";
       }
     }
-  }
+  };
 
   const formatFileSize = (bytes: number) => {
-    if (bytes < 1024) return bytes + " B"
-    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB"
-    else if (bytes < 1073741824) return (bytes / 1048576).toFixed(1) + " MB"
-    else return (bytes / 1073741824).toFixed(1) + " GB"
-  }
+    if (bytes < 1024) return bytes + " B";
+    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB";
+    else if (bytes < 1073741824) return (bytes / 1048576).toFixed(1) + " MB";
+    else return (bytes / 1073741824).toFixed(1) + " GB";
+  };
 
   const getFileIcon = (fileType: string) => {
-    if (fileType.includes("pdf")) return "📄"
-    if (fileType.includes("word") || fileType.includes("doc")) return "📝"
-    if (fileType.includes("excel") || fileType.includes("sheet") || fileType.includes("csv")) return "📊"
-    if (fileType.includes("powerpoint") || fileType.includes("presentation")) return "📑"
-    if (fileType.includes("zip") || fileType.includes("rar") || fileType.includes("tar")) return "🗜️"
-    if (fileType.includes("audio")) return "🎵"
-    if (fileType.includes("video")) return "🎬"
-    return "📁"
-  }
+    if (fileType.includes("pdf")) return "📄";
+    if (fileType.includes("word") || fileType.includes("doc")) return "📝";
+    if (
+      fileType.includes("excel") ||
+      fileType.includes("sheet") ||
+      fileType.includes("csv")
+    )
+      return "📊";
+    if (fileType.includes("powerpoint") || fileType.includes("presentation"))
+      return "📑";
+    if (
+      fileType.includes("zip") ||
+      fileType.includes("rar") ||
+      fileType.includes("tar")
+    )
+      return "🗜️";
+    if (fileType.includes("audio")) return "🎵";
+    if (fileType.includes("video")) return "🎬";
+    return "📁";
+  };
 
   return (
     <div className="min-h-[calc(100vh-160px)] bg-gradient-to-b from-rose-50/50 to-white dark:from-gray-900 dark:to-gray-950">
@@ -442,11 +509,11 @@ export default function ChatScreen() {
             <div className="p-4 border-b dark:border-gray-800 bg-white dark:bg-gray-900 sticky top-0 z-10">
               <h2 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-200 flex items-center">
                 <MessageSquare className="h-5 w-5 mr-2 text-rose-500" />
-                Tin nhắn
+                {t("title")}
               </h2>
               <div className="relative">
                 <Input
-                  placeholder="Tìm kiếm cuộc trò chuyện..."
+                  placeholder={t("search")}
                   value={searchTerm}
                   onChange={(e) => setSearchTerm(e.target.value)}
                   className="pl-9 bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 focus:ring-rose-500 focus:border-rose-500"
@@ -472,30 +539,46 @@ export default function ChatScreen() {
                 ) : filteredConversations.length > 0 ? (
                   filteredConversations.map((conversation) => {
                     const notification = conversationNotification.find(
-                      (n) => n.conversationId === conversation.conversationId,
-                    )
-                    const hasNewMessages = notification && notification.newMessageCount > 0
+                      (n) => n.conversationId === conversation.conversationId
+                    );
+                    const hasNewMessages =
+                      notification && notification.newMessageCount > 0;
 
                     return (
                       <div
                         key={conversation.conversationId}
                         className={`p-3 flex items-center hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-all duration-200 ${
-                          selectedConversation?.conversationId === conversation.conversationId
+                          selectedConversation?.conversationId ===
+                          conversation.conversationId
                             ? "bg-rose-50 dark:bg-rose-900/10 border-l-4 border-rose-500"
                             : "border-l-4 border-transparent"
-                        } ${hasNewMessages ? "bg-rose-50/50 dark:bg-rose-900/5" : ""}`}
+                        } ${
+                          hasNewMessages
+                            ? "bg-rose-50/50 dark:bg-rose-900/5"
+                            : ""
+                        }`}
                         onClick={handleSelectedCoversation(conversation)}
                       >
                         <div className="relative">
                           <Avatar className="h-12 w-12 border-2 border-white dark:border-gray-800 shadow-sm">
-                            <AvatarImage src={conversation.friendImageUrl || "/placeholder.svg"} />
+                            <AvatarImage
+                              src={
+                                conversation.friendImageUrl ||
+                                "/placeholder.svg" ||
+                                "/placeholder.svg"
+                              }
+                            />
                             <AvatarFallback className="bg-rose-100 text-rose-800 dark:bg-rose-900 dark:text-rose-200">
-                              {conversation.friendName.substring(0, 2).toUpperCase()}
+                              {conversation.friendName
+                                .substring(0, 2)
+                                .toUpperCase()}
                             </AvatarFallback>
                           </Avatar>
                           {hasNewMessages && (
                             <span className="absolute -top-1 -right-1 h-5 w-5 bg-rose-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center text-[10px] text-white font-medium">
-                              {notification.newMessageCount > 9 ? "9+" : notification.newMessageCount}
+                              {notification.newMessageCount > 9
+                                ? "9+"
+                                : notification.newMessageCount}
                             </span>
                           )}
                           <span className="absolute bottom-0 right-0 h-3 w-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-800"></span>
@@ -511,25 +594,29 @@ export default function ChatScreen() {
                             >
                               {conversation?.friendName ?? ""}
                             </h3>
-                            <span className="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">12:30</span>
+                            <span className="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">
+                              12:30
+                            </span>
                           </div>
                           <p className="text-sm text-gray-500 dark:text-gray-400 truncate">
                             {hasNewMessages ? (
                               <span className="text-rose-600 dark:text-rose-400">
-                                {notification?.newMessageCount} tin nhắn mới
+                                {t("newMessages", {
+                                  count: notification?.newMessageCount,
+                                })}
                               </span>
                             ) : (
-                              "Nhấn để xem tin nhắn"
+                              t("clickToView")
                             )}
                           </p>
                         </div>
                       </div>
-                    )
+                    );
                   })
                 ) : (
                   <div className="p-6 text-center text-gray-500 dark:text-gray-400 flex flex-col items-center">
                     <Search className="h-8 w-8 mb-2 text-gray-400" />
-                    <p>Không tìm thấy kết quả</p>
+                    <p>{t("noResults")}</p>
                   </div>
                 )}
               </div>
@@ -547,13 +634,26 @@ export default function ChatScreen() {
                 {/* Chat Header */}
                 <div className="p-4 border-b dark:border-gray-800 flex justify-between items-center bg-white dark:bg-gray-900 sticky top-0 z-10">
                   <div className="flex items-center">
-                    <Button variant="ghost" size="icon" className="mr-2 md:hidden" onClick={handleBackToConversations}>
+                    <Button
+                      variant="ghost"
+                      size="icon"
+                      className="mr-2 md:hidden"
+                      onClick={handleBackToConversations}
+                    >
                       <ChevronLeft className="h-5 w-5 text-gray-600 dark:text-gray-300" />
                     </Button>
                     <Avatar className="h-10 w-10 border-2 border-white dark:border-gray-800 shadow-sm">
-                      <AvatarImage src={selectedConversation.friendImageUrl || "/placeholder.svg"} />
+                      <AvatarImage
+                        src={
+                          selectedConversation.friendImageUrl ||
+                          "/placeholder.svg" ||
+                          "/placeholder.svg"
+                        }
+                      />
                       <AvatarFallback className="bg-rose-100 text-rose-800 dark:bg-rose-900 dark:text-rose-200">
-                        {selectedConversation.friendName.substring(0, 2).toUpperCase()}
+                        {selectedConversation.friendName
+                          .substring(0, 2)
+                          .toUpperCase()}
                       </AvatarFallback>
                     </Avatar>
                     <div className="ml-3">
@@ -562,45 +662,11 @@ export default function ChatScreen() {
                       </h3>
                       <p className="text-xs text-gray-500 dark:text-gray-400 flex items-center">
                         <span className="h-1.5 w-1.5 bg-green-500 rounded-full inline-block mr-1.5"></span>
-                        Đang hoạt động
+                        {t("online")}
                       </p>
                     </div>
                   </div>
                   <div className="flex items-center space-x-1">
-                    <TooltipProvider>
-                      <Tooltip>
-                        <TooltipTrigger asChild>
-                          <Button
-                            variant="ghost"
-                            size="icon"
-                            className="text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full"
-                          >
-                            <Phone className="h-5 w-5" />
-                          </Button>
-                        </TooltipTrigger>
-                        <TooltipContent>
-                          <p>Gọi thoại</p>
-                        </TooltipContent>
-                      </Tooltip>
-                    </TooltipProvider>
-
-                    <TooltipProvider>
-                      <Tooltip>
-                        <TooltipTrigger asChild>
-                          <Button
-                            variant="ghost"
-                            size="icon"
-                            className="text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full"
-                          >
-                            <Video className="h-5 w-5" />
-                          </Button>
-                        </TooltipTrigger>
-                        <TooltipContent>
-                          <p>Gọi video</p>
-                        </TooltipContent>
-                      </Tooltip>
-                    </TooltipProvider>
-
                     <TooltipProvider>
                       <Tooltip>
                         <TooltipTrigger asChild>
@@ -613,7 +679,7 @@ export default function ChatScreen() {
                           </Button>
                         </TooltipTrigger>
                         <TooltipContent>
-                          <p>Tùy chọn khác</p>
+                          <p>{t("actions.moreOptions")}</p>
                         </TooltipContent>
                       </Tooltip>
                     </TooltipProvider>
@@ -632,11 +698,22 @@ export default function ChatScreen() {
                       {Array(5)
                         .fill(0)
                         .map((_, index) => (
-                          <div key={index} className={`flex ${index % 2 === 0 ? "justify-end" : "justify-start"}`}>
-                            {index % 2 !== 0 && <Skeleton className="h-8 w-8 rounded-full mr-2" />}
+                          <div
+                            key={index}
+                            className={`flex ${
+                              index % 2 === 0 ? "justify-end" : "justify-start"
+                            }`}
+                          >
+                            {index % 2 !== 0 && (
+                              <Skeleton className="h-8 w-8 rounded-full mr-2" />
+                            )}
                             <div>
                               <Skeleton
-                                className={`h-10 w-48 ${index % 2 === 0 ? "rounded-tr-none" : "rounded-tl-none"} rounded-2xl`}
+                                className={`h-10 w-48 ${
+                                  index % 2 === 0
+                                    ? "rounded-tr-none"
+                                    : "rounded-tl-none"
+                                } rounded-2xl`}
                               />
                               <div className="mt-1 h-3"></div>
                             </div>
@@ -648,16 +725,19 @@ export default function ChatScreen() {
                       {messages.map((message, index) => {
                         const showDate =
                           index === 0 ||
-                          formatDate(messages[index - 1].createdOnUtc) !== formatDate(message.createdOnUtc)
+                          formatDate(messages[index - 1].createdOnUtc) !==
+                            formatDate(message.createdOnUtc);
 
                         // Check if this message is from the same sender as the previous one
                         const isSameSenderAsPrevious =
                           index > 0 &&
                           messages[index - 1].isClinic === message.isClinic &&
-                          formatDate(messages[index - 1].createdOnUtc) === formatDate(message.createdOnUtc)
+                          formatDate(messages[index - 1].createdOnUtc) ===
+                            formatDate(message.createdOnUtc);
 
                         // Determine if we should show the avatar (only for first message in a group)
-                        const showAvatar = !message.isClinic && !isSameSenderAsPrevious
+                        const showAvatar =
+                          !message.isClinic && !isSameSenderAsPrevious;
 
                         return (
                           <div key={message.id}>
@@ -674,16 +754,24 @@ export default function ChatScreen() {
                             )}
                             <div
                               className={`flex ${
-                                message.isClinic ? "justify-end" : "justify-start"
-                              } group ${isSameSenderAsPrevious ? "mt-1" : "mt-4"}`}
+                                message.isClinic
+                                  ? "justify-end"
+                                  : "justify-start"
+                              } group ${
+                                isSameSenderAsPrevious ? "mt-1" : "mt-4"
+                              }`}
                             >
                               {!message.isClinic && (
                                 <div className="w-8 h-8 mr-2 flex-shrink-0">
                                   {showAvatar ? (
                                     <Avatar className="h-8 w-8 border-2 border-white dark:border-gray-800 shadow-sm">
-                                      <AvatarImage src={message.senderImageUrl ?? ""} />
+                                      <AvatarImage
+                                        src={message.senderImageUrl ?? ""}
+                                      />
                                       <AvatarFallback className="bg-rose-100 text-rose-800 dark:bg-rose-900 dark:text-rose-200">
-                                        {message.senderName?.substring(0, 2).toUpperCase() || ""}
+                                        {message.senderName
+                                          ?.substring(0, 2)
+                                          .toUpperCase() || ""}
                                       </AvatarFallback>
                                     </Avatar>
                                   ) : null}
@@ -710,91 +798,106 @@ export default function ChatScreen() {
                                         : "bg-white/10 dark:bg-gray-800/10 rounded-tl-none"
                                     }`}
                                   >
-                                    <span className="text-3xl">{message.content}</span>
+                                    <span className="text-3xl">
+                                      {message.content}
+                                    </span>
                                   </div>
                                 )}
 
-                                {message.contentType === "image" && message.fileUrl && (
-                                  <div
-                                    className={`rounded-2xl p-2 max-w-xs md:max-w-md overflow-hidden shadow-sm ${
-                                      message.isClinic
-                                        ? "bg-rose-500/10 rounded-tr-none"
-                                        : "bg-white dark:bg-gray-800 rounded-tl-none"
-                                    }`}
-                                  >
-                                    <div className="relative rounded-lg overflow-hidden">
-                                      <Image
-                                        src={message.fileUrl || "/placeholder.svg"}
-                                        alt={message.fileName || "Hình ảnh"}
-                                        width={300}
-                                        height={200}
-                                        className="object-contain max-h-[300px] w-auto"
-                                        style={{ maxWidth: "100%" }}
-                                      />
-                                      <div className="absolute inset-0 bg-black/0 hover:bg-black/20 transition-all flex items-center justify-center opacity-0 hover:opacity-100">
+                                {message.contentType === "image" &&
+                                  message.fileUrl && (
+                                    <div
+                                      className={`rounded-2xl p-2 max-w-xs md:max-w-md overflow-hidden shadow-sm ${
+                                        message.isClinic
+                                          ? "bg-rose-500/10 rounded-tr-none"
+                                          : "bg-white dark:bg-gray-800 rounded-tl-none"
+                                      }`}
+                                    >
+                                      <div className="relative rounded-lg overflow-hidden">
+                                        <Image
+                                          src={
+                                            message.fileUrl ||
+                                            "/placeholder.svg" ||
+                                            "/placeholder.svg"
+                                          }
+                                          alt={
+                                            message.fileName ||
+                                            t("fileTypes.image")
+                                          }
+                                          width={300}
+                                          height={200}
+                                          className="object-contain max-h-[300px] w-auto"
+                                          style={{ maxWidth: "100%" }}
+                                        />
+                                        <div className="absolute inset-0 bg-black/0 hover:bg-black/20 transition-all flex items-center justify-center opacity-0 hover:opacity-100">
+                                          <a
+                                            href={message.fileUrl}
+                                            target="_blank"
+                                            rel="noopener noreferrer"
+                                            download={message.fileName}
+                                            className="bg-white/80 p-2 rounded-full"
+                                          >
+                                            <Download className="h-5 w-5 text-gray-800" />
+                                          </a>
+                                        </div>
+                                      </div>
+                                      {message.fileName && (
+                                        <p className="text-xs mt-1 text-center text-gray-600 dark:text-gray-300">
+                                          {message.fileName}
+                                        </p>
+                                      )}
+                                    </div>
+                                  )}
+
+                                {message.contentType === "file" &&
+                                  message.fileUrl && (
+                                    <div
+                                      className={`rounded-2xl p-3 max-w-xs md:max-w-md break-words shadow-sm ${
+                                        message.isClinic
+                                          ? "bg-rose-500/10 rounded-tr-none"
+                                          : "bg-white dark:bg-gray-800 rounded-tl-none"
+                                      }`}
+                                    >
+                                      <div className="flex items-center gap-3">
+                                        <div className="text-2xl">
+                                          {getFileIcon(message.fileType || "")}
+                                        </div>
+                                        <div className="flex-1 min-w-0">
+                                          <p className="text-sm font-medium text-gray-800 dark:text-gray-200 truncate">
+                                            {message.fileName}
+                                          </p>
+                                          {message.fileSize && (
+                                            <p className="text-xs text-gray-500 dark:text-gray-400">
+                                              {formatFileSize(message.fileSize)}
+                                            </p>
+                                          )}
+                                        </div>
                                         <a
                                           href={message.fileUrl}
                                           target="_blank"
                                           rel="noopener noreferrer"
                                           download={message.fileName}
-                                          className="bg-white/80 p-2 rounded-full"
+                                          className="bg-gray-100 dark:bg-gray-700 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                                         >
-                                          <Download className="h-5 w-5 text-gray-800" />
+                                          <Download className="h-4 w-4 text-gray-600 dark:text-gray-300" />
                                         </a>
                                       </div>
                                     </div>
-                                    {message.fileName && (
-                                      <p className="text-xs mt-1 text-center text-gray-600 dark:text-gray-300">
-                                        {message.fileName}
-                                      </p>
-                                    )}
-                                  </div>
-                                )}
-
-                                {message.contentType === "file" && message.fileUrl && (
-                                  <div
-                                    className={`rounded-2xl p-3 max-w-xs md:max-w-md break-words shadow-sm ${
-                                      message.isClinic
-                                        ? "bg-rose-500/10 rounded-tr-none"
-                                        : "bg-white dark:bg-gray-800 rounded-tl-none"
-                                    }`}
-                                  >
-                                    <div className="flex items-center gap-3">
-                                      <div className="text-2xl">{getFileIcon(message.fileType || "")}</div>
-                                      <div className="flex-1 min-w-0">
-                                        <p className="text-sm font-medium text-gray-800 dark:text-gray-200 truncate">
-                                          {message.fileName}
-                                        </p>
-                                        {message.fileSize && (
-                                          <p className="text-xs text-gray-500 dark:text-gray-400">
-                                            {formatFileSize(message.fileSize)}
-                                          </p>
-                                        )}
-                                      </div>
-                                      <a
-                                        href={message.fileUrl}
-                                        target="_blank"
-                                        rel="noopener noreferrer"
-                                        download={message.fileName}
-                                        className="bg-gray-100 dark:bg-gray-700 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
-                                      >
-                                        <Download className="h-4 w-4 text-gray-600 dark:text-gray-300" />
-                                      </a>
-                                    </div>
-                                  </div>
-                                )}
+                                  )}
 
                                 <div
                                   className={`flex items-center mt-1 text-xs text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity ${
                                     message.isClinic ? "justify-end" : ""
                                   }`}
                                 >
-                                  <span>{formatTime(message.createdOnUtc)}</span>
+                                  <span>
+                                    {formatTime(message.createdOnUtc)}
+                                  </span>
                                 </div>
                               </div>
                             </div>
                           </div>
-                        )
+                        );
                       })}
                     </div>
                   ) : (
@@ -802,9 +905,13 @@ export default function ChatScreen() {
                       <div className="w-16 h-16 bg-rose-100 dark:bg-rose-900/20 rounded-full flex items-center justify-center mb-4">
                         <MessageSquare className="h-8 w-8 text-rose-500" />
                       </div>
-                      <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-200">Không có tin nhắn</h3>
+                      <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-200">
+                        {t("noMessages")}
+                      </h3>
                       <p className="text-gray-500 max-w-xs">
-                        Hãy bắt đầu cuộc trò chuyện với {selectedConversation.friendName}
+                        {t("startConversation", {
+                          name: selectedConversation.friendName,
+                        })}
                       </p>
                     </div>
                   )}
@@ -813,7 +920,9 @@ export default function ChatScreen() {
                   {Object.keys(uploadProgress).length > 0 && (
                     <div className="fixed bottom-20 right-6 max-w-xs w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
                       <div className="p-3 bg-rose-50 dark:bg-rose-900/20 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
-                        <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Đang tải lên...</p>
+                        <p className="text-sm font-medium text-gray-800 dark:text-gray-200">
+                          {t("uploading")}
+                        </p>
                         <Button
                           variant="ghost"
                           size="icon"
@@ -824,15 +933,21 @@ export default function ChatScreen() {
                         </Button>
                       </div>
                       <div className="p-3 space-y-3">
-                        {Object.entries(uploadProgress).map(([id, progress]) => (
-                          <div key={id} className="space-y-1">
-                            <div className="flex justify-between text-xs">
-                              <span className="text-gray-600 dark:text-gray-300">Đang tải...</span>
-                              <span className="text-gray-600 dark:text-gray-300">{progress}%</span>
+                        {Object.entries(uploadProgress).map(
+                          ([id, progress]) => (
+                            <div key={id} className="space-y-1">
+                              <div className="flex justify-between text-xs">
+                                <span className="text-gray-600 dark:text-gray-300">
+                                  {t("uploading")}
+                                </span>
+                                <span className="text-gray-600 dark:text-gray-300">
+                                  {progress}%
+                                </span>
+                              </div>
+                              <Progress value={progress} className="h-1.5" />
                             </div>
-                            <Progress value={progress} className="h-1.5" />
-                          </div>
-                        ))}
+                          )
+                        )}
                       </div>
                     </div>
                   )}
@@ -842,59 +957,10 @@ export default function ChatScreen() {
                 <div className="px-4 py-3 border-t dark:border-gray-800 bg-white dark:bg-gray-900">
                   <div className="flex items-center space-x-2">
                     <div className="flex space-x-1">
-                      <TooltipProvider>
-                        <Tooltip>
-                          <TooltipTrigger asChild>
-                            <Button
-                              variant="ghost"
-                              size="icon"
-                              className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full h-9 w-9"
-                              onClick={() => fileInputRef.current?.click()}
-                              disabled={isUploading}
-                            >
-                              <Paperclip className="h-5 w-5" />
-                              <input
-                                type="file"
-                                ref={fileInputRef}
-                                className="hidden"
-                                onChange={(e) => handleFileSelect(e, "file")}
-                                accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.zip,.rar"
-                              />
-                            </Button>
-                          </TooltipTrigger>
-                          <TooltipContent>
-                            <p>Đính kèm tệp</p>
-                          </TooltipContent>
-                        </Tooltip>
-                      </TooltipProvider>
-
-                      <TooltipProvider>
-                        <Tooltip>
-                          <TooltipTrigger asChild>
-                            <Button
-                              variant="ghost"
-                              size="icon"
-                              className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full h-9 w-9"
-                              onClick={() => imageInputRef.current?.click()}
-                              disabled={isUploading}
-                            >
-                              <ImageIcon className="h-5 w-5" />
-                              <input
-                                type="file"
-                                ref={imageInputRef}
-                                className="hidden"
-                                onChange={(e) => handleFileSelect(e, "image")}
-                                accept="image/*"
-                              />
-                            </Button>
-                          </TooltipTrigger>
-                          <TooltipContent>
-                            <p>Gửi hình ảnh</p>
-                          </TooltipContent>
-                        </Tooltip>
-                      </TooltipProvider>
-
-                      <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>
+                      <Popover
+                        open={showEmojiPicker}
+                        onOpenChange={setShowEmojiPicker}
+                      >
                         <PopoverTrigger asChild>
                           <Button
                             variant="ghost"
@@ -904,7 +970,10 @@ export default function ChatScreen() {
                             <Smile className="h-5 w-5" />
                           </Button>
                         </PopoverTrigger>
-                        <PopoverContent className="w-full p-0 border-none shadow-xl" align="start">
+                        <PopoverContent
+                          className="w-full p-0 border-none shadow-xl"
+                          align="start"
+                        >
                           <EmojiPicker
                             onEmojiClick={handleEmojiClick}
                             width="100%"
@@ -918,17 +987,19 @@ export default function ChatScreen() {
                     <div className="flex-1 relative">
                       <Input
                         ref={inputRef}
-                        placeholder="Nhập tin nhắn..."
+                        placeholder={t("inputPlaceholder")}
                         value={inputMessage}
                         onChange={(e) => setInputMessage(e.target.value)}
                         onKeyDown={(e) => {
                           if (e.key === "Enter") {
-                            e.preventDefault()
+                            e.preventDefault();
                             if (inputMessage.trim()) {
-                              ;(async () => {
-                                await sendMessage!(selectedConversation.entityId)(inputMessage, "text")
-                                setInputMessage("")
-                              })()
+                              (async () => {
+                                await sendMessage!(
+                                  selectedConversation.entityId
+                                )(inputMessage, "text");
+                                setInputMessage("");
+                              })();
                             }
                           }
                         }}
@@ -939,15 +1010,18 @@ export default function ChatScreen() {
                     <Button
                       onClick={() => {
                         if (inputMessage.trim()) {
-                          sendMessage!(selectedConversation.entityId)(inputMessage, "text")
-                          setInputMessage("")
+                          sendMessage!(selectedConversation.entityId)(
+                            inputMessage,
+                            "text"
+                          );
+                          setInputMessage("");
                         }
                       }}
                       className="bg-rose-500 hover:bg-rose-600 transition-colors rounded-full"
                       disabled={!inputMessage.trim() || isUploading}
                     >
                       <Send className="h-4 w-4" />
-                      <span className="sr-only">Gửi tin nhắn</span>
+                      <span className="sr-only">{t("send")}</span>
                     </Button>
                   </div>
                 </div>
@@ -958,17 +1032,17 @@ export default function ChatScreen() {
                   <MessageSquare className="h-10 w-10 text-rose-500" />
                 </div>
                 <h3 className="text-xl font-medium mb-3 text-gray-800 dark:text-gray-200">
-                  Chưa có cuộc trò chuyện nào
+                  {t("noConversations")}
                 </h3>
                 <p className="text-gray-500 max-w-sm mb-6">
-                  Chọn một cuộc trò chuyện từ danh sách bên trái để bắt đầu nhắn tin
+                  {t("selectConversation")}
                 </p>
                 <Button
                   variant="outline"
                   className="border-rose-200 text-rose-600 hover:bg-rose-50 dark:border-rose-800 dark:text-rose-400 dark:hover:bg-rose-900/20"
                 >
                   <Bell className="h-4 w-4 mr-2" />
-                  Bật thông báo
+                  {t("enableNotifications")}
                 </Button>
               </div>
             )}
@@ -976,5 +1050,5 @@ export default function ChatScreen() {
         </div>
       </div>
     </div>
-  )
+  );
 }
diff --git a/src/app/[locale]/clinicManager/layout.tsx b/src/app/[locale]/clinicManager/layout.tsx
index c412edd..1c09dcf 100644
--- a/src/app/[locale]/clinicManager/layout.tsx
+++ b/src/app/[locale]/clinicManager/layout.tsx
@@ -107,7 +107,9 @@ export default function ClinicManagerLayout({
 
   // Handle completion of first login flow
   const handleFirstLoginComplete = () => {
-    setShowFirstLoginFlow(false);
+    // IMPORTANT: We're not immediately hiding the FirstLoginFlow component anymore
+    // The component itself will handle the redirection after showing the success dialog
+    // setShowFirstLoginFlow(false) - This line is removed
   };
 
   // Handle completion of re-registration
@@ -117,7 +119,7 @@ export default function ClinicManagerLayout({
 
   // Show the first login flow if needed
   if (showFirstLoginFlow) {
-    return <FirstLoginFlow onComplete={handleFirstLoginComplete} />;
+    return <FirstLoginFlow onComplete={() => setShowFirstLoginFlow(false)} />;
   }
 
   // Show the re-register form if the clinic is rejected
diff --git a/src/app/[locale]/clinicManager/order/page.tsx b/src/app/[locale]/clinicManager/order/page.tsx
index 62612a5..0ee3901 100644
--- a/src/app/[locale]/clinicManager/order/page.tsx
+++ b/src/app/[locale]/clinicManager/order/page.tsx
@@ -1,5 +1,5 @@
 "use client";
-import { useState } from "react";
+import { useState, useEffect } from "react";
 import type React from "react";
 
 import {
@@ -132,6 +132,8 @@ export default function OrderPage() {
   const [searchTerm, setSearchTerm] = useState("");
   const [sortColumn, setSortColumn] = useState("");
   const [sortOrder, setSortOrder] = useState("");
+  // Add a state to track if we should show pagination
+  const [showPagination, setShowPagination] = useState(false);
 
   // State for order detail dialog
   const [selectedOrder, setSelectedOrder] = useState<OrderItem | null>(null);
@@ -167,6 +169,13 @@ export default function OrderPage() {
   const hasNextPage = data?.value?.hasNextPage || false;
   const hasPreviousPage = data?.value?.hasPreviousPage || false;
 
+  // Determine if pagination should be shown based on total count
+  useEffect(() => {
+    if (totalCount > 0) {
+      setShowPagination(true);
+    }
+  }, [totalCount]);
+
   // Format date function
   const formatDate = (dateString: string) => {
     const date = new Date(dateString);
@@ -209,6 +218,17 @@ export default function OrderPage() {
     setPageIndex(1); // Reset to first page when page size changes
   };
 
+  // Modified page change handler to prevent pagination from disappearing
+  const handlePageChange = (newPage: number) => {
+    // If we're going to the last page, make sure we don't lose pagination
+    if (newPage === Math.ceil(totalCount / pageSize)) {
+      // We're going to the last page
+      setPageIndex(newPage);
+    } else {
+      setPageIndex(newPage);
+    }
+  };
+
   // Reset all filters and sorting
   const resetFilters = () => {
     setSearchTerm("");
@@ -606,8 +626,9 @@ export default function OrderPage() {
                 </Table>
               </div>
 
-              {/* Pagination and page size selector */}
-              {orders.length > 0 && (
+              {/* Pagination and page size selector - IMPORTANT CHANGE HERE */}
+              {/* Use showPagination instead of orders.length > 0 */}
+              {(showPagination || orders.length > 0) && (
                 <div className="mt-4 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                   <div className="flex items-center gap-2">
                     <span className="text-sm text-muted-foreground">
@@ -627,21 +648,24 @@ export default function OrderPage() {
                     </select>
                     <span className="text-sm text-muted-foreground ml-4">
                       {t.rich("showingResults", {
-                        start: (pageIndex - 1) * pageSize + 1,
+                        start:
+                          orders.length > 0
+                            ? (pageIndex - 1) * pageSize + 1
+                            : 0,
                         end: Math.min(pageIndex * pageSize, totalCount),
                         total: totalCount,
                       })}
                     </span>
                   </div>
 
-                  {/* Using your existing Pagination component */}
+                  {/* Use our custom handlePageChange instead of setPageIndex directly */}
                   <Pagination
                     pageIndex={pageIndex}
                     pageSize={pageSize}
                     totalCount={totalCount}
                     hasNextPage={hasNextPage}
                     hasPreviousPage={hasPreviousPage}
-                    onPageChange={setPageIndex}
+                    onPageChange={handlePageChange}
                   />
                 </div>
               )}
diff --git a/src/app/[locale]/clinicManager/wallet/page.tsx b/src/app/[locale]/clinicManager/wallet/page.tsx
index a6679fb..5508463 100644
--- a/src/app/[locale]/clinicManager/wallet/page.tsx
+++ b/src/app/[locale]/clinicManager/wallet/page.tsx
@@ -18,7 +18,6 @@ import {
   Clock,
   FileText,
   User,
-  Globe,
 } from "lucide-react";
 import {
   Card,
@@ -209,15 +208,12 @@ function ClinicWalletPage() {
 
   // Get the selected clinic
   const selectedClinic = useMemo(() => {
-    if (!clinicId && mainClinic) {
-      // If no clinicId is provided and we have a main clinic, use that
-      return mainClinic;
+    // If no clinicId is provided, don't auto-select any clinic
+    if (!clinicId) {
+      return null;
     }
-    return (
-      clinics.find((clinic) => clinic.id === clinicId) ||
-      (clinics.length > 0 ? clinics[0] : null)
-    );
-  }, [clinicId, clinics, mainClinic]);
+    return clinics.find((clinic) => clinic.id === clinicId) || null;
+  }, [clinicId, clinics]);
 
   // We'll use the actual API data instead of mock data
   const filteredWithdrawals = [];
@@ -285,7 +281,15 @@ function ClinicWalletPage() {
             {t("status.pending")}
           </Badge>
         );
+      case "waiting approval":
+      case "waitingapproval":
+        return (
+          <Badge className="bg-blue-500 hover:bg-blue-600 px-3 py-1 flex items-center justify-center">
+            {t("status.waitingApproval")}
+          </Badge>
+        );
       case "rejected":
+      case "rejected by system":
         return (
           <Badge className="bg-rose-500 hover:bg-rose-600 px-3 py-1 flex items-center justify-center">
             {t("status.rejected")}
@@ -314,6 +318,20 @@ function ClinicWalletPage() {
 
   // Handle withdrawal request
   const handleWithdrawalRequest = () => {
+    if (!selectedClinic) {
+      toast.error(
+        t("notifications.selectClinicFirst") || "Please select a clinic first",
+        {
+          position: "top-center",
+          autoClose: 3000,
+          hideProgressBar: false,
+          closeOnClick: true,
+          pauseOnHover: true,
+          draggable: true,
+        }
+      );
+      return;
+    }
     setIsWithdrawalModalOpen(true);
   };
 
@@ -468,6 +486,24 @@ function ClinicWalletPage() {
       return false;
     }
 
+    // Filter by status
+    if (statusFilter !== "all") {
+      const status = transaction.status.toLowerCase();
+      if (
+        statusFilter === "pending" &&
+        status !== "pending" &&
+        status !== "waiting approval" &&
+        status !== "waitingapproval"
+      ) {
+        return false;
+      } else if (
+        statusFilter !== "pending" &&
+        !status.includes(statusFilter.toLowerCase())
+      ) {
+        return false;
+      }
+    }
+
     // Filter by date range
     if (dateRange.from || dateRange.to) {
       const transactionDate = new Date(transaction.transactionDate);
@@ -603,6 +639,7 @@ function ClinicWalletPage() {
             <Button
               onClick={handleWithdrawalRequest}
               disabled={isLoadingBranches || !selectedClinic}
+              className={!selectedClinic ? "opacity-50 cursor-not-allowed" : ""}
             >
               <Plus className="h-4 w-4 mr-1" />
               {t("actions.requestWithdrawal")}
@@ -1066,6 +1103,7 @@ function ClinicWalletPage() {
                                 </Tooltip>
                               </TooltipProvider>
                             </TableCell>
+
                             <TableCell className="text-center">
                               <div className="flex justify-center gap-2">
                                 {transaction.status.toLowerCase() ===
@@ -1217,7 +1255,10 @@ function ClinicWalletPage() {
         <WithdrawalRequestModal
           isOpen={isWithdrawalModalOpen}
           onClose={() => setIsWithdrawalModalOpen(false)}
-          onSuccess={handleWithdrawalSuccess} // Pass the success callback
+          onSuccess={() => {
+            handleWithdrawalSuccess(); // Existing callback
+            refetchTransactions(); // Add this to refresh the transactions table
+          }}
           clinic={{
             id: selectedClinic.id,
             name: selectedClinic.name,
diff --git a/src/app/[locale]/clinicStaff/customer-schedule/page.tsx b/src/app/[locale]/clinicStaff/customer-schedule/page.tsx
index 3b3fae6..c4ceb00 100644
--- a/src/app/[locale]/clinicStaff/customer-schedule/page.tsx
+++ b/src/app/[locale]/clinicStaff/customer-schedule/page.tsx
@@ -793,7 +793,7 @@ export default function SchedulesPage() {
     } else {
       fetchClinicSchedules();
     }
-    toast.success(t("rescheduleSuccess"));
+    // toast.success(t("rescheduleSuccess"));
   };
 
   const handleCheckIn = async (schedule: CustomerSchedule) => {
@@ -935,10 +935,6 @@ export default function SchedulesPage() {
         <CardHeader>
           <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
             <CardTitle>{t("allSchedules")}</CardTitle>
-            <Button className="gap-2 w-full md:w-auto">
-              <Plus size={16} />
-              {t("newSchedule")}
-            </Button>
           </div>
         </CardHeader>
         <CardContent className="p-0">
@@ -1154,13 +1150,13 @@ export default function SchedulesPage() {
               </div>
 
               {/* Error message for customer search */}
-              {errorResponse && (
+              {/* {errorResponse && (
                 <Alert variant="destructive" className="mt-2">
                   <AlertCircle className="h-4 w-4" />
                   <AlertTitle>{errorResponse.title}</AlertTitle>
                   <AlertDescription>{errorResponse.detail}</AlertDescription>
                 </Alert>
-              )}
+              )} */}
 
               {/* Filter description */}
               <div className="text-sm text-muted-foreground">
diff --git a/src/app/[locale]/systemAdmin/user/page.tsx b/src/app/[locale]/systemAdmin/user/page.tsx
index cccb39f..f788091 100644
--- a/src/app/[locale]/systemAdmin/user/page.tsx
+++ b/src/app/[locale]/systemAdmin/user/page.tsx
@@ -1,49 +1,57 @@
 import Image from "next/image";
-import React from "react";
+import type React from "react";
 
-const UserList: React.FC = () => {
-  const users = [
+const CustomerList: React.FC = () => {
+  const customers = [
     {
       id: 1,
       image: "https://placehold.co/40x40.png",
-      name: "Apple Watch Series 4",
-      email: "user1@gmail.com",
-      phone: "123456789",
-      role: "Admin System",
+      name: "Nguyễn Văn Anh",
+      email: "nguyenvananh@gmail.com",
+      phone: "0912345678",
+      type: "Premium",
       status: "Active",
+      lastPurchase: "15/04/2023",
+      totalSpent: "28.500.000₫",
     },
     {
       id: 2,
       image: "https://placehold.co/40x40.png",
-      name: "Microsoft Headsquare",
-      email: "user1@gmail.com",
-      phone: "123456789",
-      role: "Admin clinic",
+      name: "Trần Thị Hương",
+      email: "tranthihuong@gmail.com",
+      phone: "0987654321",
+      type: "Standard",
       status: "Active",
+      lastPurchase: "10/04/2023",
+      totalSpent: "18.200.000₫",
     },
     {
       id: 3,
       image: "https://placehold.co/40x40.png",
-      name: "Women's Dress",
-      email: "user1@gmail.com",
-      phone: "123456789",
-      role: "Staff clinic",
+      name: "Lê Minh Tuấn",
+      email: "leminhtuanvn@gmail.com",
+      phone: "0965432109",
+      type: "Corporate",
       status: "Active",
+      lastPurchase: "05/04/2023",
+      totalSpent: "56.750.000₫",
     },
     {
       id: 4,
       image: "https://placehold.co/40x40.png",
-      name: "Samsung A50",
-      email: "user1@gmail.com",
-      phone: "123456789",
-      role: "Staff clinic",
+      name: "Phạm Thị Mai",
+      email: "phamthimai@gmail.com",
+      phone: "0932109876",
+      type: "Standard",
       status: "Inactive",
+      lastPurchase: "20/03/2023",
+      totalSpent: "8.150.000₫",
     },
   ];
 
   return (
     <div className="container mx-auto p-6 bg-white shadow-lg rounded-md">
-      <h1 className="text-2xl font-semibold mb-4">User List</h1>
+      <h1 className="text-2xl font-semibold mb-4">Customer List</h1>
 
       <div className="flex justify-between items-center mb-4">
         <button className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
@@ -55,7 +63,7 @@ const UserList: React.FC = () => {
           className="border px-4 py-2 rounded-md w-1/3"
         />
         <button className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
-          Add User
+          Add Customer
         </button>
       </div>
 
@@ -66,44 +74,48 @@ const UserList: React.FC = () => {
               <input type="checkbox" />
             </th>
             <th className="p-3 text-left">Image</th>
-            <th className="p-3 text-left">Full Name</th>
+            <th className="p-3 text-left">Customer Name</th>
             <th className="p-3 text-left">Email</th>
             <th className="p-3 text-left">Phone</th>
-            <th className="p-3 text-left">Role</th>
+            <th className="p-3 text-left">Type</th>
             <th className="p-3 text-left">Status</th>
+            <th className="p-3 text-left">Last Purchase</th>
+            <th className="p-3 text-left">Total Spent</th>
             <th className="p-3 text-left">Action</th>
           </tr>
         </thead>
         <tbody>
-          {users.map((user) => (
-            <tr key={user.id} className="border-t">
+          {customers.map((customer) => (
+            <tr key={customer.id} className="border-t">
               <td className="p-3">
                 <input type="checkbox" />
               </td>
               <td className="p-3">
                 <Image
-                  src={user.image}
-                  alt={user.name}
+                  src={customer.image || "/placeholder.svg"}
+                  alt={customer.name}
                   className="w-10 h-10 rounded-full"
-                  width={80}
-                  height={80}
+                  width={40}
+                  height={40}
                 />
               </td>
-              <td className="p-3">{user.name}</td>
-              <td className="p-3">{user.email}</td>
-              <td className="p-3">{user.phone}</td>
-              <td className="p-3">{user.role}</td>
+              <td className="p-3">{customer.name}</td>
+              <td className="p-3">{customer.email}</td>
+              <td className="p-3">{customer.phone}</td>
+              <td className="p-3">{customer.type}</td>
               <td className="p-3">
                 <span
                   className={`px-3 py-1 text-sm rounded-md ${
-                    user.status === "Active"
+                    customer.status === "Active"
                       ? "bg-green-100 text-green-600"
                       : "bg-red-100 text-red-600"
                   }`}
                 >
-                  {user.status}
+                  {customer.status}
                 </span>
               </td>
+              <td className="p-3">{customer.lastPurchase}</td>
+              <td className="p-3">{customer.totalSpent}</td>
               <td className="p-3">
                 <button className="text-gray-500 hover:text-gray-700">
                   ...
@@ -123,7 +135,7 @@ const UserList: React.FC = () => {
             <option>15</option>
           </select>
         </div>
-        <div>1-5 of 6</div>
+        <div>1-4 of 4</div>
         <div className="flex space-x-2">
           <button className="px-3 py-1 border rounded-md">❮</button>
           <button className="px-3 py-1 border rounded-md">❯</button>
@@ -133,4 +145,4 @@ const UserList: React.FC = () => {
   );
 };
 
-export default UserList;
+export default CustomerList;
diff --git a/src/components/clinicManager/AddProcedure.tsx b/src/components/clinicManager/AddProcedure.tsx
index 9c94ee6..2c1eabc 100644
--- a/src/components/clinicManager/AddProcedure.tsx
+++ b/src/components/clinicManager/AddProcedure.tsx
@@ -1,36 +1,46 @@
-"use client"
-
-import type React from "react"
-import { useState, useEffect } from "react"
-import { useAddProcedureMutation } from "@/features/clinic-service/api"
-import { toast } from "react-toastify"
-import { X, Plus, Clock, DollarSign, Trash2, AlertCircle, FileText } from "lucide-react"
-import { motion } from "framer-motion"
-import dynamic from "next/dynamic"
-import { Checkbox } from "@/components/ui/checkbox"
-import { Label } from "@/components/ui/label"
-import { useTheme } from "next-themes"
-import { useTranslations } from "next-intl"
+"use client";
+
+import type React from "react";
+import { useState, useEffect } from "react";
+import { useAddProcedureMutation } from "@/features/clinic-service/api";
+import { toast } from "react-toastify";
+import {
+  X,
+  Plus,
+  Clock,
+  DollarSign,
+  Trash2,
+  AlertCircle,
+  FileText,
+} from "lucide-react";
+import { motion } from "framer-motion";
+import dynamic from "next/dynamic";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Label } from "@/components/ui/label";
+import { useTheme } from "next-themes";
+import { useTranslations } from "next-intl";
 
 // Dynamically import QuillEditor to avoid SSR issues
 const QuillEditor = dynamic(() => import("@/components/ui/quill-editor"), {
   ssr: false,
-  loading: () => <div className="h-40 w-full border rounded-md bg-muted/20 dark:bg-muted/40 animate-pulse" />,
-})
+  loading: () => (
+    <div className="h-40 w-full border rounded-md bg-muted/20 dark:bg-muted/40 animate-pulse" />
+  ),
+});
 
 // Define error types based on the API response
 interface ValidationError {
-  code: string
-  message: string
+  code: string;
+  message: string;
 }
 
 // Update the ApiError interface to handle cases where errors might be null
 interface ApiError {
-  type: string
-  title: string
-  status: number
-  detail: string
-  errors: ValidationError[] | null
+  type: string;
+  title: string;
+  status: number;
+  detail: string;
+  errors: ValidationError[] | null;
 }
 
 const AddProcedure = ({
@@ -38,111 +48,119 @@ const AddProcedure = ({
   clinicServiceId,
   onSuccess,
 }: {
-  onClose: () => void
-  clinicServiceId: string
-  onSuccess?: () => void
+  onClose: () => void;
+  clinicServiceId: string;
+  onSuccess?: () => void;
 }) => {
-  const t = useTranslations("service") 
-  const { theme } = useTheme()
-  const [name, setName] = useState("")
-  const [description, setDescription] = useState("")
-  const [stepIndex, setStepIndex] = useState(0)
-  const [priceTypes, setPriceTypes] = useState([{ name: "", duration: 0, price: 0, isDefault: true }])
-  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})
-  const [editorLoaded, setEditorLoaded] = useState(false)
-
-  const [addProcedure, { isLoading }] = useAddProcedureMutation()
+  const t = useTranslations("service");
+  const { theme } = useTheme();
+  const [name, setName] = useState("");
+  const [description, setDescription] = useState("");
+  const [stepIndex, setStepIndex] = useState(0);
+  const [priceTypes, setPriceTypes] = useState([
+    { name: "", duration: 0, price: 0, isDefault: true },
+  ]);
+  const [validationErrors, setValidationErrors] = useState<
+    Record<string, string>
+  >({});
+  const [editorLoaded, setEditorLoaded] = useState(false);
+
+  const [addProcedure, { isLoading }] = useAddProcedureMutation();
 
   // Ensure editor is loaded
   useEffect(() => {
-    setEditorLoaded(true)
-  }, [])
+    setEditorLoaded(true);
+  }, []);
 
   const handleAddPriceType = () => {
-    setPriceTypes([...priceTypes, { name: "", duration: 0, price: 0, isDefault: false }])
-  }
+    setPriceTypes([
+      ...priceTypes,
+      { name: "", duration: 0, price: 0, isDefault: false },
+    ]);
+  };
 
   const handleRemovePriceType = (index: number) => {
-    const updatedPriceTypes = priceTypes.filter((_, i) => i !== index)
+    const updatedPriceTypes = priceTypes.filter((_, i) => i !== index);
 
     // If we removed the default price type and there are other price types, set the first one as default
     if (priceTypes[index].isDefault && updatedPriceTypes.length > 0) {
-      updatedPriceTypes[0].isDefault = true
+      updatedPriceTypes[0].isDefault = true;
     }
 
-    setPriceTypes(updatedPriceTypes)
-  }
+    setPriceTypes(updatedPriceTypes);
+  };
 
   const handlePriceTypeChange = (index: number, field: string, value: any) => {
-    const updatedPriceTypes = [...priceTypes]
+    const updatedPriceTypes = [...priceTypes];
 
     if (field === "isDefault" && value === true) {
       // If setting this one as default, unset others
       updatedPriceTypes.forEach((pt, i) => {
-        pt.isDefault = i === index
-      })
+        pt.isDefault = i === index;
+      });
     } else {
       updatedPriceTypes[index] = {
         ...updatedPriceTypes[index],
-        [field]: field === "price" || field === "duration" ? Number(value) : value,
-      }
+        [field]:
+          field === "price" || field === "duration" ? Number(value) : value,
+      };
     }
 
-    setPriceTypes(updatedPriceTypes)
-  }
+    setPriceTypes(updatedPriceTypes);
+  };
 
   const handleDescriptionChange = (value: string) => {
-    setDescription(value)
+    setDescription(value);
     if (value.trim().length >= 2) {
       setValidationErrors((prev) => {
-        const newErrors = { ...prev }
-        delete newErrors.Description
-        return newErrors
-      })
+        const newErrors = { ...prev };
+        delete newErrors.Description;
+        return newErrors;
+      });
     }
-  }
+  };
 
   // Helper function to display field error
   const getFieldError = (fieldName: string) => {
-    return validationErrors[fieldName] || ""
-  }
+    return validationErrors[fieldName] || "";
+  };
 
   // Update the handleSubmit function to use JSON request body instead of FormData
   const handleSubmit = async (e: React.FormEvent) => {
-    e.preventDefault()
+    e.preventDefault();
     // Clear previous validation errors
-    setValidationErrors({})
+    setValidationErrors({});
 
     // Client-side validation
-    const errors: Record<string, string> = {}
+    const errors: Record<string, string> = {};
 
     if (!name.trim()) {
-      errors.Name = t("procedure.errors.nameRequired")
+      errors.Name = t("procedure.errors.nameRequired");
     } else if (name.trim().length < 2) {
-      errors.Name = t("procedure.errors.nameMinLength")
+      errors.Name = t("procedure.errors.nameMinLength");
     }
 
     if (!description.trim()) {
-      errors.Description = t("procedure.errors.descriptionRequired")
+      errors.Description = t("procedure.errors.descriptionRequired");
     } else if (description.trim().length < 2) {
-      errors.Description = t("procedure.errors.descriptionMinLength")
+      errors.Description = t("procedure.errors.descriptionMinLength");
     }
 
     if (priceTypes.length === 0) {
-      errors.PriceTypes = t("procedure.errors.priceTypeRequired")
+      errors.PriceTypes = t("procedure.errors.priceTypeRequired");
     }
 
     // Ensure at least one price type is set as default
     if (priceTypes.length > 0 && !priceTypes.some((pt) => pt.isDefault)) {
-      errors.DefaultPriceType = t("procedure.errors.defaultPriceTypeRequired")
+      errors.DefaultPriceType = t("procedure.errors.defaultPriceTypeRequired");
     }
 
     if (Object.keys(errors).length > 0) {
-      setValidationErrors(errors)
+      setValidationErrors(errors);
       // Show the first error as a toast
-      const firstError = Object.values(errors)[0]
-      toast.error(firstError)
-      return
+      const firstError = Object.values(errors)[0];
+      toast.error(firstError);
+      return;
     }
 
     // Format the data according to the API requirements
@@ -151,7 +169,7 @@ const AddProcedure = ({
       duration: item.duration,
       price: item.price,
       isDefault: item.isDefault,
-    }))
+    }));
 
     // Create the request body as a JSON object
     const requestBody = {
@@ -160,42 +178,42 @@ const AddProcedure = ({
       description: description,
       stepIndex: stepIndex,
       procedurePriceTypes: procedurePriceTypes,
-    }
+    };
 
     try {
-      await addProcedure({ data: requestBody }).unwrap()
-      toast.success(t("procedure.success.added"))
+      await addProcedure({ data: requestBody }).unwrap();
+      toast.success(t("procedure.success.added"));
       // Reset form data instead of closing
-      setName("")
-      setDescription("")
-      setStepIndex(0)
-      setPriceTypes([{ name: "", duration: 0, price: 0, isDefault: true }])
-      setValidationErrors({})
+      setName("");
+      setDescription("");
+      setStepIndex(0);
+      setPriceTypes([{ name: "", duration: 0, price: 0, isDefault: true }]);
+      setValidationErrors({});
       // Call onSuccess callback if provided
       if (onSuccess) {
-        onSuccess()
+        onSuccess();
       }
     } catch (error: any) {
-      console.error(t("procedure.errors.addError"), error)
+      console.error(t("procedure.errors.addError"), error);
 
       if (error.data) {
-        const apiError = error.data as ApiError
+        const apiError = error.data as ApiError;
 
         // Handle case where there are specific field errors
         if (apiError.errors) {
-          const newErrors: Record<string, string> = {}
+          const newErrors: Record<string, string> = {};
 
           apiError.errors.forEach((err) => {
-            newErrors[err.code] = err.message
-          })
+            newErrors[err.code] = err.message;
+          });
 
-          setValidationErrors(newErrors)
+          setValidationErrors(newErrors);
 
           // Show the first error as a toast
           if (apiError.errors.length > 0) {
-            toast.error(apiError.errors[0].message)
+            toast.error(apiError.errors[0].message);
           } else {
-            toast.error(t("procedure.errors.generalError"))
+            toast.error(t("procedure.errors.generalError"));
           }
         }
         // Handle case where there's a general error message but no specific field errors
@@ -205,30 +223,32 @@ const AddProcedure = ({
             setValidationErrors((prev) => ({
               ...prev,
               StepIndex: t("procedure.errors.stepIndexExists"),
-            }))
-            toast.error(t("procedure.errors.stepIndexExists"))
+            }));
+            toast.error(t("procedure.errors.stepIndexExists"));
           } else {
-            toast.error(apiError.detail)
+            toast.error(apiError.detail);
           }
         } else {
-          toast.error(t("procedure.errors.generalError"))
+          toast.error(t("procedure.errors.generalError"));
         }
       } else {
-        toast.error(t("procedure.errors.generalError"))
+        toast.error(t("procedure.errors.generalError"));
       }
     }
-  }
+  };
 
   return (
     <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 p-4">
       <motion.div
         initial={{ opacity: 0, scale: 0.95 }}
         animate={{ opacity: 1, scale: 1 }}
-        className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-2xl flex flex-col max-h-[90vh]"
+        className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-2xl flex flex-col max-h-[90vh] overflow-hidden"
       >
         {/* Header with gradient - Fixed at top */}
         <div className="relative bg-gradient-to-r from-purple-500 to-pink-600 p-5 rounded-t-xl top-0 z-10">
-          <h2 className="text-2xl font-bold text-white">{t("procedure.addProcedure")}</h2>
+          <h2 className="text-2xl font-bold text-white">
+            {t("procedure.addProcedure")}
+          </h2>
           <button
             onClick={onClose}
             className="absolute top-4 right-4 p-1.5 rounded-full bg-white/20 hover:bg-white/30 text-white transition-colors"
@@ -238,7 +258,7 @@ const AddProcedure = ({
         </div>
 
         {/* Scrollable content */}
-        <div className="overflow-y-auto flex-1 dark:bg-gray-800">
+        <div className="overflow-y-auto flex-1 dark:bg-gray-800 rounded-b-xl">
           <form onSubmit={handleSubmit} className="p-6 space-y-6">
             <div className="space-y-1.5">
               <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
@@ -253,13 +273,13 @@ const AddProcedure = ({
                 }`}
                 value={name}
                 onChange={(e) => {
-                  setName(e.target.value)
+                  setName(e.target.value);
                   if (e.target.value.trim().length >= 2) {
                     setValidationErrors((prev) => {
-                      const newErrors = { ...prev }
-                      delete newErrors.Name
-                      return newErrors
-                    })
+                      const newErrors = { ...prev };
+                      delete newErrors.Name;
+                      return newErrors;
+                    });
                   }
                 }}
                 placeholder={t("procedure.namePlaceholder")}
@@ -283,7 +303,9 @@ const AddProcedure = ({
                 {editorLoaded && (
                   <div
                     onClick={(e) => e.stopPropagation()}
-                    className={getFieldError("Description") ? "quill-error" : ""}
+                    className={
+                      getFieldError("Description") ? "quill-error" : ""
+                    }
                   >
                     <QuillEditor
                       value={description}
@@ -319,14 +341,14 @@ const AddProcedure = ({
                 }`}
                 value={stepIndex}
                 onChange={(e) => {
-                  setStepIndex(Number(e.target.value))
+                  setStepIndex(Number(e.target.value));
                   // Clear the step index error when the user changes the value
                   if (getFieldError("StepIndex")) {
                     setValidationErrors((prev) => {
-                      const newErrors = { ...prev }
-                      delete newErrors.StepIndex
-                      return newErrors
-                    })
+                      const newErrors = { ...prev };
+                      delete newErrors.StepIndex;
+                      return newErrors;
+                    });
                   }
                 }}
                 min="0"
@@ -378,7 +400,9 @@ const AddProcedure = ({
                         placeholder={t("procedure.priceTypeNamePlaceholder")}
                         className="p-2 border border-gray-300 dark:border-gray-600 rounded-lg w-full focus:ring-2 focus:ring-purple-300 dark:focus:ring-purple-500 focus:border-purple-500 dark:focus:border-purple-400 transition-all dark:bg-gray-800 dark:text-gray-100"
                         value={item.name}
-                        onChange={(e) => handlePriceTypeChange(index, "name", e.target.value)}
+                        onChange={(e) =>
+                          handlePriceTypeChange(index, "name", e.target.value)
+                        }
                         required
                       />
                     </div>
@@ -393,7 +417,13 @@ const AddProcedure = ({
                         placeholder="30"
                         className="p-2 border border-gray-300 dark:border-gray-600 rounded-lg w-full focus:ring-2 focus:ring-purple-300 dark:focus:ring-purple-500 focus:border-purple-500 dark:focus:border-purple-400 transition-all dark:bg-gray-800 dark:text-gray-100"
                         value={item.duration}
-                        onChange={(e) => handlePriceTypeChange(index, "duration", e.target.value)}
+                        onChange={(e) =>
+                          handlePriceTypeChange(
+                            index,
+                            "duration",
+                            e.target.value
+                          )
+                        }
                         min="0"
                         required
                       />
@@ -409,7 +439,9 @@ const AddProcedure = ({
                         placeholder="100,000"
                         className="p-2 border border-gray-300 dark:border-gray-600 rounded-lg w-full focus:ring-2 focus:ring-purple-300 dark:focus:ring-purple-500 focus:border-purple-500 dark:focus:border-purple-400 transition-all dark:bg-gray-800 dark:text-gray-100"
                         value={item.price}
-                        onChange={(e) => handlePriceTypeChange(index, "price", e.target.value)}
+                        onChange={(e) =>
+                          handlePriceTypeChange(index, "price", e.target.value)
+                        }
                         min="0"
                         required
                       />
@@ -420,9 +452,14 @@ const AddProcedure = ({
                         <Checkbox
                           id={`default-${index}`}
                           checked={item.isDefault}
-                          onCheckedChange={(checked) => handlePriceTypeChange(index, "isDefault", checked)}
+                          onCheckedChange={(checked) =>
+                            handlePriceTypeChange(index, "isDefault", checked)
+                          }
                         />
-                        <Label htmlFor={`default-${index}`} className="text-xs text-gray-500 dark:text-gray-400">
+                        <Label
+                          htmlFor={`default-${index}`}
+                          className="text-xs text-gray-500 dark:text-gray-400"
+                        >
                           {t("procedure.setAsDefault")}
                         </Label>
                       </div>
@@ -461,7 +498,9 @@ const AddProcedure = ({
                 disabled={isLoading}
                 className="px-6 py-2.5 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-medium rounded-lg shadow-sm hover:shadow transition-all disabled:opacity-70 disabled:cursor-not-allowed"
               >
-                {isLoading ? t("procedure.adding") : t("procedure.addProcedure")}
+                {isLoading
+                  ? t("procedure.adding")
+                  : t("procedure.addProcedure")}
               </button>
             </div>
           </form>
@@ -475,14 +514,14 @@ const AddProcedure = ({
           z-index: 10;
           margin-bottom: 60px; /* Add extra space below the editor */
         }
-        
+
         .ql-toolbar.ql-snow,
         .ql-container.ql-snow {
           position: relative;
           z-index: 10;
           background-color: white;
         }
-        
+
         /* Fix for the Quill editor to not extend beyond its bounds */
         .ql-editor {
           max-height: 150px;
@@ -490,40 +529,40 @@ const AddProcedure = ({
           background-color: white;
           color: #1e293b;
         }
-        
+
         /* Dark mode styles for Quill */
-        [data-theme='dark'] .ql-toolbar.ql-snow,
-        [data-theme='dark'] .ql-container.ql-snow {
+        [data-theme="dark"] .ql-toolbar.ql-snow,
+        [data-theme="dark"] .ql-container.ql-snow {
           background-color: #1f2937;
           border-color: #4b5563;
         }
-        
-        [data-theme='dark'] .ql-editor {
+
+        [data-theme="dark"] .ql-editor {
           background-color: #1f2937;
           color: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-picker-label {
+
+        [data-theme="dark"] .ql-picker-label {
           color: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-stroke {
+
+        [data-theme="dark"] .ql-stroke {
           stroke: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-fill {
+
+        [data-theme="dark"] .ql-fill {
           fill: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-picker-options {
+
+        [data-theme="dark"] .ql-picker-options {
           background-color: #1f2937;
           border-color: #4b5563;
         }
-        
-        [data-theme='dark'] .ql-picker-item {
+
+        [data-theme="dark"] .ql-picker-item {
           color: #d1d5db;
         }
-        
+
         /* Clear float to prevent overlap */
         .clear-both {
           clear: both;
@@ -532,7 +571,7 @@ const AddProcedure = ({
         }
       `}</style>
     </div>
-  )
-}
+  );
+};
 
-export default AddProcedure
+export default AddProcedure;
diff --git a/src/components/clinicManager/EditServiceForm.tsx b/src/components/clinicManager/EditServiceForm.tsx
index 90f49f8..30c6cef 100644
--- a/src/components/clinicManager/EditServiceForm.tsx
+++ b/src/components/clinicManager/EditServiceForm.tsx
@@ -45,6 +45,7 @@ import {
 import { useTheme } from "next-themes";
 import { useTranslations } from "next-intl";
 import { Checkbox } from "@/components/ui/checkbox";
+import { el } from "date-fns/locale";
 
 // Dynamically import QuillEditor to avoid SSR issues
 const QuillEditor = dynamic(() => import("@/components/ui/quill-editor"), {
@@ -226,9 +227,15 @@ const UpdateServiceForm: React.FC<UpdateServiceFormProps> = ({
       await updateService({ id: formData.id, data: updatedFormData }).unwrap();
       toast.success(t("success.serviceUpdated"));
       onSaveSuccess();
-    } catch (error) {
-      console.error("Update failed:", error);
-      toast.error(t("errors.updateServiceFailed"));
+    } catch (error: any) {
+      console.log("error: ", error);
+      if (error.data?.errors?.message) {
+        console.log("haha");
+        toast.error(error?.data?.errors?.message);
+      } else {
+        console.log("hihi");
+        toast.error(t("errors.updateServiceFailed"));
+      }
     }
   };
 
diff --git a/src/components/clinicManager/configs/create-shift-dialog.tsx b/src/components/clinicManager/configs/create-shift-dialog.tsx
new file mode 100644
index 0000000..9edb5b9
--- /dev/null
+++ b/src/components/clinicManager/configs/create-shift-dialog.tsx
@@ -0,0 +1,53 @@
+"use client";
+
+import { useTranslations } from "next-intl";
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogHeader,
+  DialogTitle,
+} from "@/components/ui/dialog";
+import { Plus } from "lucide-react";
+import { ShiftForm } from "./shift-form";
+
+interface CreateShiftDialogProps {
+  open: boolean;
+  onOpenChange: (open: boolean) => void;
+  onSuccess: () => void;
+}
+
+export function CreateShiftDialog({
+  open,
+  onOpenChange,
+  onSuccess,
+}: CreateShiftDialogProps) {
+  const t = useTranslations("configs");
+
+  const handleClose = () => {
+    onOpenChange(false);
+  };
+
+  return (
+    <Dialog open={open} onOpenChange={onOpenChange}>
+      <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
+        <DialogHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/5 dark:to-indigo-900/5 p-6 -mx-6 -mt-6 rounded-t-lg">
+          <DialogTitle className="text-xl text-purple-800 dark:text-purple-300 flex items-center gap-2">
+            <Plus className="h-5 w-5" />
+            {t("shifts.actions.create")}
+          </DialogTitle>
+          <DialogDescription className="text-purple-600/80 dark:text-purple-400/80">
+            {t("shifts.createDescription")}
+          </DialogDescription>
+        </DialogHeader>
+        <ShiftForm
+          onSuccess={() => {
+            handleClose();
+            onSuccess();
+          }}
+          onCancel={handleClose}
+        />
+      </DialogContent>
+    </Dialog>
+  );
+}
diff --git a/src/components/clinicManager/configs/delete-shift-dialog.tsx b/src/components/clinicManager/configs/delete-shift-dialog.tsx
new file mode 100644
index 0000000..64a3496
--- /dev/null
+++ b/src/components/clinicManager/configs/delete-shift-dialog.tsx
@@ -0,0 +1,113 @@
+"use client";
+
+import { useTranslations } from "next-intl";
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogFooter,
+  DialogHeader,
+  DialogTitle,
+} from "@/components/ui/dialog";
+import { Button } from "@/components/ui/button";
+import { Trash } from "lucide-react";
+import { toast } from "react-toastify";
+import type { Shift } from "@/features/configs/types";
+import { useDeleteShiftMutation } from "@/features/configs/api";
+
+interface DeleteShiftDialogProps {
+  open: boolean;
+  onOpenChange: (open: boolean) => void;
+  shift: Shift | null;
+  onSuccess: () => void;
+}
+
+export function DeleteShiftDialog({
+  open,
+  onOpenChange,
+  shift,
+  onSuccess,
+}: DeleteShiftDialogProps) {
+  const t = useTranslations("configs");
+  const [deleteShift, { isLoading: isDeleting }] = useDeleteShiftMutation();
+
+  const handleClose = () => {
+    onOpenChange(false);
+  };
+
+  const confirmDelete = async () => {
+    if (!shift) return;
+
+    try {
+      await deleteShift({ id: shift.id }).unwrap();
+      toast.success(t("shifts.messages.deleteSuccess"), {
+        className: "bg-gradient-to-r from-purple-600 to-indigo-600 text-white",
+        progressClassName: "bg-white",
+      });
+      onSuccess();
+    } catch (error) {
+      toast.error("Failed to delete shift");
+    } finally {
+      handleClose();
+    }
+  };
+
+  return (
+    <Dialog open={open} onOpenChange={onOpenChange}>
+      <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
+        <DialogHeader className="bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/5 dark:to-red-800/10 p-6 -mx-6 -mt-6 rounded-t-lg">
+          <DialogTitle className="text-xl text-red-600 dark:text-red-400 flex items-center gap-2">
+            <Trash className="h-5 w-5" />
+            {t("shifts.actions.delete")}
+          </DialogTitle>
+          <DialogDescription className="text-red-600/80 dark:text-red-400/80">
+            {t("shifts.messages.deleteConfirm")}
+          </DialogDescription>
+        </DialogHeader>
+        <div className="bg-red-50/50 dark:bg-red-900/5 p-4 rounded-lg border border-red-100 dark:border-red-800/20">
+          <p className="text-sm text-red-600/80 dark:text-red-400/80 flex items-center gap-2">
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              width="16"
+              height="16"
+              viewBox="0 0 24 24"
+              fill="none"
+              stroke="currentColor"
+              strokeWidth="2"
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              className="lucide lucide-alert-triangle"
+            >
+              <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />
+              <path d="M12 9v4" />
+              <path d="M12 17h.01" />
+            </svg>
+            {t("shifts.messages.deleteWarning")}
+          </p>
+        </div>
+        <DialogFooter className="gap-2 sm:gap-0">
+          <Button
+            variant="outline"
+            onClick={handleClose}
+            className="border-purple-100 dark:border-purple-800/20 hover:bg-purple-50 dark:hover:bg-purple-900/10"
+          >
+            {t("shifts.actions.cancel")}
+          </Button>
+          <Button
+            variant="destructive"
+            onClick={confirmDelete}
+            disabled={isDeleting}
+            className="bg-red-600 hover:bg-red-700"
+          >
+            {isDeleting ? (
+              <div className="h-4 w-4 animate-spin rounded-full border-b-2 border-white mr-2"></div>
+            ) : (
+              <Trash className="h-4 w-4 mr-2" />
+            )}
+            {t("shifts.actions.confirm")}
+          </Button>
+        </DialogFooter>
+      </DialogContent>
+    </Dialog>
+  );
+}
diff --git a/src/components/clinicManager/configs/edit-shift-dialog.tsx b/src/components/clinicManager/configs/edit-shift-dialog.tsx
new file mode 100644
index 0000000..d2d6427
--- /dev/null
+++ b/src/components/clinicManager/configs/edit-shift-dialog.tsx
@@ -0,0 +1,58 @@
+"use client";
+import { useTranslations } from "next-intl";
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogHeader,
+  DialogTitle,
+} from "@/components/ui/dialog";
+import { Edit } from "lucide-react";
+import { ShiftForm } from "./shift-form";
+import type { Shift } from "@/features/configs/types";
+
+interface EditShiftDialogProps {
+  open: boolean;
+  onOpenChange: (open: boolean) => void;
+  shift: Shift | null;
+  onSuccess: () => void;
+}
+
+export function EditShiftDialog({
+  open,
+  onOpenChange,
+  shift,
+  onSuccess,
+}: EditShiftDialogProps) {
+  const t = useTranslations("configs");
+
+  const handleClose = () => {
+    onOpenChange(false);
+  };
+
+  return (
+    <Dialog open={open} onOpenChange={onOpenChange}>
+      <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
+        <DialogHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/5 dark:to-indigo-900/5 p-6 -mx-6 -mt-6 rounded-t-lg">
+          <DialogTitle className="text-xl text-purple-800 dark:text-purple-300 flex items-center gap-2">
+            <Edit className="h-5 w-5" />
+            {t("shifts.actions.edit")}
+          </DialogTitle>
+          <DialogDescription className="text-purple-600/80 dark:text-purple-400/80">
+            {t("shifts.editDescription")}
+          </DialogDescription>
+        </DialogHeader>
+        {shift && (
+          <ShiftForm
+            shift={shift}
+            onSuccess={() => {
+              handleClose();
+              onSuccess();
+            }}
+            onCancel={handleClose}
+          />
+        )}
+      </DialogContent>
+    </Dialog>
+  );
+}
diff --git a/src/components/clinicManager/configs/shift-table.tsx b/src/components/clinicManager/configs/shift-table.tsx
index 1ecdb9b..8f34e52 100644
--- a/src/components/clinicManager/configs/shift-table.tsx
+++ b/src/components/clinicManager/configs/shift-table.tsx
@@ -11,46 +11,24 @@ import {
   TableHeader,
   TableRow,
 } from "@/components/ui/table";
-import {
-  Dialog,
-  DialogContent,
-  DialogDescription,
-  DialogFooter,
-  DialogHeader,
-  DialogTitle,
-} from "@/components/ui/dialog";
 import { Button } from "@/components/ui/button";
-import {
-  DropdownMenu,
-  DropdownMenuContent,
-  DropdownMenuItem,
-  DropdownMenuTrigger,
-} from "@/components/ui/dropdown-menu";
 import {
   Pagination,
   PaginationContent,
   PaginationItem,
 } from "@/components/ui/pagination";
-import { ShiftForm } from "./shift-form";
-import { toast } from "react-toastify";
-import {
-  Edit,
-  MoreHorizontal,
-  Plus,
-  Trash,
-  Clock,
-  Calendar,
-} from "lucide-react";
+import { Edit, Plus, Trash, Clock, Calendar } from "lucide-react";
 import type { Shift } from "@/features/configs/types";
-import {
-  useDeleteShiftMutation,
-  useGetAllShiftsQuery,
-} from "@/features/configs/api";
+import { useGetAllShiftsQuery } from "@/features/configs/api";
 import { Badge } from "@/components/ui/badge";
+import { CreateShiftDialog } from "@/components/clinicManager/configs/create-shift-dialog";
+import { EditShiftDialog } from "@/components/clinicManager/configs/edit-shift-dialog";
+import { DeleteShiftDialog } from "@/components/clinicManager/configs/delete-shift-dialog";
 
 export function ShiftTable() {
   const t = useTranslations("configs");
 
+  // State
   const [pageIndex, setPageIndex] = useState(1);
   const [pageSize, setPageSize] = useState(5);
   const [isCreateOpen, setIsCreateOpen] = useState(false);
@@ -58,16 +36,17 @@ export function ShiftTable() {
   const [isDeleteOpen, setIsDeleteOpen] = useState(false);
   const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
 
+  // API hooks
   const { data, isLoading, refetch } = useGetAllShiftsQuery({
     pageIndex,
     pageSize,
   });
 
-  const [deleteShift, { isLoading: isDeleting }] = useDeleteShiftMutation();
-
+  // Derived data
   const shifts = data?.value?.items || [];
-  const totalPages = data?.value?.totalCount || 1;
+  const totalPages = Math.ceil((data?.value?.totalCount || 0) / pageSize);
 
+  // Handlers
   const handleEdit = (shift: Shift) => {
     setSelectedShift(shift);
     setIsEditOpen(true);
@@ -78,24 +57,25 @@ export function ShiftTable() {
     setIsDeleteOpen(true);
   };
 
-  const confirmDelete = async () => {
-    if (!selectedShift) return;
+  const handleCloseEdit = () => {
+    setIsEditOpen(false);
+    requestAnimationFrame(() => {
+      setSelectedShift(null);
+    });
+  };
 
-    try {
-      await deleteShift({ id: selectedShift.id }).unwrap();
-      toast.success(t("shifts.messages.deleteSuccess"), {
-        className: "bg-gradient-to-r from-purple-600 to-indigo-600 text-white",
-        progressClassName: "bg-white",
-      });
-      refetch();
-    } catch (error) {
-      toast.error("Failed to delete shift");
-    } finally {
-      setIsDeleteOpen(false);
+  const handleCloseDelete = () => {
+    setIsDeleteOpen(false);
+    requestAnimationFrame(() => {
       setSelectedShift(null);
-    }
+    });
+  };
+
+  const handleDialogSuccess = () => {
+    refetch();
   };
 
+  // Formatters
   const formatTime = (timeString: string) => {
     try {
       return format(new Date(`2000-01-01T${timeString}`), "hh:mm a");
@@ -124,26 +104,26 @@ export function ShiftTable() {
         </Button>
       </div>
 
-      <div className="rounded-lg border border-purple-100 dark:border-purple-800/20 overflow-hidden shadow-sm">
+      <div className="rounded-lg border border-purple-100 dark:border-purple-800/20 overflow-hidden shadow-sm mx-auto">
         <Table>
           <TableHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/5 dark:to-indigo-900/5">
             <TableRow>
-              <TableHead className="font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.name")}
               </TableHead>
-              <TableHead className="font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.startTime")}
               </TableHead>
-              <TableHead className="font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.endTime")}
               </TableHead>
-              <TableHead className="font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.note")}
               </TableHead>
-              <TableHead className="font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.createdAt")}
               </TableHead>
-              <TableHead className="text-right font-semibold text-purple-800 dark:text-purple-300">
+              <TableHead className="font-semibold text-purple-800 dark:text-purple-300 w-1/6 text-center">
                 {t("shifts.columns.actions")}
               </TableHead>
             </TableRow>
@@ -187,8 +167,8 @@ export function ShiftTable() {
                   key={shift.id}
                   className="hover:bg-purple-50/50 dark:hover:bg-purple-900/5 transition-colors"
                 >
-                  <TableCell className="font-medium">
-                    <div className="flex items-center gap-2">
+                  <TableCell className="font-medium text-center">
+                    <div className="flex items-center justify-center gap-2">
                       <Badge
                         variant="outline"
                         className="bg-purple-50 text-purple-700 border-purple-200"
@@ -197,19 +177,19 @@ export function ShiftTable() {
                       </Badge>
                     </div>
                   </TableCell>
-                  <TableCell>
-                    <div className="flex items-center gap-2">
+                  <TableCell className="text-center">
+                    <div className="flex items-center justify-center gap-2">
                       <Clock className="h-4 w-4 text-purple-500" />
                       {formatTime(shift.startTime)}
                     </div>
                   </TableCell>
-                  <TableCell>
-                    <div className="flex items-center gap-2">
+                  <TableCell className="text-center">
+                    <div className="flex items-center justify-center gap-2">
                       <Clock className="h-4 w-4 text-indigo-500" />
                       {formatTime(shift.endTime)}
                     </div>
                   </TableCell>
-                  <TableCell className="max-w-xs truncate">
+                  <TableCell className="max-w-xs truncate text-center">
                     {shift.note ? (
                       shift.note
                     ) : (
@@ -218,44 +198,35 @@ export function ShiftTable() {
                       </span>
                     )}
                   </TableCell>
-                  <TableCell>
-                    <div className="flex items-center gap-2">
+                  <TableCell className="text-center">
+                    <div className="flex items-center justify-center gap-2">
                       <Calendar className="h-4 w-4 text-purple-500" />
                       {formatDate(shift.createdAt)}
                     </div>
                   </TableCell>
-                  <TableCell className="text-right">
-                    <DropdownMenu>
-                      <DropdownMenuTrigger asChild>
-                        <Button
-                          variant="ghost"
-                          size="icon"
-                          className="hover:bg-purple-50 dark:hover:bg-purple-900/10"
-                        >
-                          <MoreHorizontal className="h-4 w-4" />
-                          <span className="sr-only">Open menu</span>
-                        </Button>
-                      </DropdownMenuTrigger>
-                      <DropdownMenuContent
-                        align="end"
-                        className="border-purple-100 dark:border-purple-800/20 shadow-lg"
+                  <TableCell className="text-center">
+                    <div className="flex justify-center gap-2">
+                      <Button
+                        variant="outline"
+                        size="sm"
+                        onClick={() => handleEdit(shift)}
+                        className="h-8 border-purple-200 text-purple-700 hover:bg-purple-50 dark:hover:bg-purple-900/10"
                       >
-                        <DropdownMenuItem
-                          onClick={() => handleEdit(shift)}
-                          className="hover:bg-purple-50 dark:hover:bg-purple-900/10 cursor-pointer"
-                        >
-                          <Edit className="mr-2 h-4 w-4 text-purple-600" />
-                          {t("shifts.actions.edit")}
-                        </DropdownMenuItem>
-                        <DropdownMenuItem
-                          onClick={() => handleDelete(shift)}
-                          className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/10 cursor-pointer"
-                        >
-                          <Trash className="mr-2 h-4 w-4" />
+                        <Edit className="h-4 w-4" />
+                        <span className="ml-1">{t("shifts.actions.edit")}</span>
+                      </Button>
+                      <Button
+                        variant="outline"
+                        size="sm"
+                        onClick={() => handleDelete(shift)}
+                        className="h-8 border-red-200 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/10"
+                      >
+                        <Trash className="h-4 w-4" />
+                        <span className="ml-1">
                           {t("shifts.actions.delete")}
-                        </DropdownMenuItem>
-                      </DropdownMenuContent>
-                    </DropdownMenu>
+                        </span>
+                      </Button>
+                    </div>
                   </TableCell>
                 </TableRow>
               ))
@@ -394,114 +365,26 @@ export function ShiftTable() {
         </div>
       )}
 
-      {/* Create Shift Dialog */}
-      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>
-        <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
-          <DialogHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/5 dark:to-indigo-900/5 p-6 -mx-6 -mt-6 rounded-t-lg">
-            <DialogTitle className="text-xl text-purple-800 dark:text-purple-300 flex items-center gap-2">
-              <Plus className="h-5 w-5" />
-              {t("shifts.actions.create")}
-            </DialogTitle>
-            <DialogDescription className="text-purple-600/80 dark:text-purple-400/80">
-              {t("shifts.createDescription")}
-            </DialogDescription>
-          </DialogHeader>
-          <ShiftForm
-            onSuccess={() => {
-              setIsCreateOpen(false);
-              refetch();
-            }}
-            onCancel={() => setIsCreateOpen(false)}
-          />
-        </DialogContent>
-      </Dialog>
+      {/* Dialogs */}
+      <CreateShiftDialog
+        open={isCreateOpen}
+        onOpenChange={setIsCreateOpen}
+        onSuccess={handleDialogSuccess}
+      />
 
-      {/* Edit Shift Dialog */}
-      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>
-        <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
-          <DialogHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/5 dark:to-indigo-900/5 p-6 -mx-6 -mt-6 rounded-t-lg">
-            <DialogTitle className="text-xl text-purple-800 dark:text-purple-300 flex items-center gap-2">
-              <Edit className="h-5 w-5" />
-              {t("shifts.actions.edit")}
-            </DialogTitle>
-            <DialogDescription className="text-purple-600/80 dark:text-purple-400/80">
-              {t("shifts.editDescription")}
-            </DialogDescription>
-          </DialogHeader>
-          {selectedShift && (
-            <ShiftForm
-              shift={selectedShift}
-              onSuccess={() => {
-                setIsEditOpen(false);
-                refetch();
-                setSelectedShift(null);
-              }}
-              onCancel={() => {
-                setIsEditOpen(false);
-                setSelectedShift(null);
-              }}
-            />
-          )}
-        </DialogContent>
-      </Dialog>
+      <EditShiftDialog
+        open={isEditOpen}
+        onOpenChange={(open) => !open && handleCloseEdit()}
+        shift={selectedShift}
+        onSuccess={handleDialogSuccess}
+      />
 
-      {/* Delete Confirmation Dialog */}
-      <Dialog open={isDeleteOpen} onOpenChange={setIsDeleteOpen}>
-        <DialogContent className="sm:max-w-md border-purple-100 dark:border-purple-800/20 shadow-lg">
-          <DialogHeader className="bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/5 dark:to-red-800/10 p-6 -mx-6 -mt-6 rounded-t-lg">
-            <DialogTitle className="text-xl text-red-600 dark:text-red-400 flex items-center gap-2">
-              <Trash className="h-5 w-5" />
-              {t("shifts.actions.delete")}
-            </DialogTitle>
-            <DialogDescription className="text-red-600/80 dark:text-red-400/80">
-              {t("shifts.messages.deleteConfirm")}
-            </DialogDescription>
-          </DialogHeader>
-          <div className="bg-red-50/50 dark:bg-red-900/5 p-4 rounded-lg border border-red-100 dark:border-red-800/20">
-            <p className="text-sm text-red-600/80 dark:text-red-400/80 flex items-center gap-2">
-              <svg
-                xmlns="http://www.w3.org/2000/svg"
-                width="16"
-                height="16"
-                viewBox="0 0 24 24"
-                fill="none"
-                stroke="currentColor"
-                strokeWidth="2"
-                strokeLinecap="round"
-                strokeLinejoin="round"
-                className="lucide lucide-alert-triangle"
-              >
-                <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />
-                <path d="M12 9v4" />
-                <path d="M12 17h.01" />
-              </svg>
-              {t("shifts.messages.deleteWarning")}
-            </p>
-          </div>
-          <DialogFooter className="gap-2 sm:gap-0">
-            <Button
-              variant="outline"
-              onClick={() => setIsDeleteOpen(false)}
-              className="border-purple-100 dark:border-purple-800/20 hover:bg-purple-50 dark:hover:bg-purple-900/10"
-            >
-              {t("shifts.actions.cancel")}
-            </Button>
-            <Button
-              variant="destructive"
-              onClick={confirmDelete}
-              disabled={isDeleting}
-              className="bg-red-600 hover:bg-red-700"
-            >
-              {isDeleting ? (
-                <div className="h-4 w-4 animate-spin rounded-full border-b-2 border-white mr-2"></div>
-              ) : (
-                <Trash className="h-4 w-4 mr-2" />
-              )}
-              {t("shifts.actions.confirm")}
-            </Button>
-          </DialogFooter>
-        </DialogContent>
-      </Dialog>
+      <DeleteShiftDialog
+        open={isDeleteOpen}
+        onOpenChange={(open) => !open && handleCloseDelete()}
+        shift={selectedShift}
+        onSuccess={handleDialogSuccess}
+      />
     </div>
   );
 }
diff --git a/src/components/clinicManager/service/view-service-modal.tsx b/src/components/clinicManager/service/view-service-modal.tsx
index f285cb0..bfb6c11 100644
--- a/src/components/clinicManager/service/view-service-modal.tsx
+++ b/src/components/clinicManager/service/view-service-modal.tsx
@@ -1,7 +1,7 @@
-"use client"
+"use client";
 
-import { useState, useEffect, useRef } from "react"
-import { motion } from "framer-motion"
+import { useState, useEffect, useRef } from "react";
+import { motion } from "framer-motion";
 import {
   MapPin,
   Mail,
@@ -20,90 +20,107 @@ import {
   Save,
   Check,
   Plus,
-} from "lucide-react"
-import Image from "next/image"
-import type { Procedure, Service } from "@/features/clinic-service/types"
-import type { Clinic } from "@/features/clinic/types"
-import ModalService from "@/components/systemAdmin/ModalService"
-import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
-import { Badge } from "@/components/ui/badge"
-import ServiceDoctorsTab from "@/components/clinicManager/service/service-doctors-tab"
-import type { DoctorService } from "@/features/doctor-service/types"
-import { useDeleteProcedureMutation, useUpdateProcedureMutation } from "@/features/clinic-service/api"
-import { toast } from "react-toastify"
-import { Checkbox } from "@/components/ui/checkbox"
-import { Label } from "@/components/ui/label"
-import { Input } from "@/components/ui/input"
-import dynamic from "next/dynamic"
-import { useTheme } from "next-themes"
+} from "lucide-react";
+import Image from "next/image";
+import type { Procedure, Service } from "@/features/clinic-service/types";
+import type { Clinic } from "@/features/clinic/types";
+import ModalService from "@/components/systemAdmin/ModalService";
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
+import { Badge } from "@/components/ui/badge";
+import ServiceDoctorsTab from "@/components/clinicManager/service/service-doctors-tab";
+import type { DoctorService } from "@/features/doctor-service/types";
+import {
+  useDeleteProcedureMutation,
+  useUpdateProcedureMutation,
+} from "@/features/clinic-service/api";
+import { toast } from "react-toastify";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Label } from "@/components/ui/label";
+import { Input } from "@/components/ui/input";
+import dynamic from "next/dynamic";
+import { useTheme } from "next-themes";
 
 // Add the useTranslations hook at the top of the component
-import { useTranslations } from "next-intl"
+import { useTranslations } from "next-intl";
 
 // Dynamically import QuillEditor to avoid SSR issues
 const QuillEditor = dynamic(() => import("@/components/ui/quill-editor"), {
   ssr: false,
-  loading: () => <div className="h-40 w-full border rounded-md bg-muted/20 dark:bg-muted/40 animate-pulse" />,
-})
+  loading: () => (
+    <div className="h-40 w-full border rounded-md bg-muted/20 dark:bg-muted/40 animate-pulse" />
+  ),
+});
 
 // Update the Service interface to include the missing properties
 interface ExtendedService extends Service {
-  clinics?: Clinic[]
-  procedures?: Procedure[]
-  doctorServices?: DoctorService[]
+  clinics?: Clinic[];
+  procedures?: Procedure[];
+  doctorServices?: DoctorService[];
 }
 
 // Lấy hàm refetch từ props
 interface ViewServiceModalProps {
-  viewService: ExtendedService | null
-  onClose: () => void
-  refetchService?: () => void
+  viewService: ExtendedService | null;
+  onClose: () => void;
+  refetchService?: () => void;
 }
 
 // Update the interface for PriceType to match the API response
 interface PriceType {
-  id?: string
-  name: string
-  price: number
-  duration: number
-  isDefault: boolean
+  id?: string;
+  name: string;
+  price: number;
+  duration: number;
+  isDefault: boolean;
 }
 
 // Add a proper interface for the editing state
 interface EditingProcedure {
-  name: string
-  description: string
-  stepIndex: number
-  procedurePriceTypes: PriceType[]
+  name: string;
+  description: string;
+  stepIndex: number;
+  procedurePriceTypes: PriceType[];
 }
 
-export default function ViewServiceModal({ viewService, onClose, refetchService }: ViewServiceModalProps) {
-  const [activeTab, setActiveTab] = useState("overview")
-  const [categories, setCategories] = useState([])
-  const [expandedDescriptions, setExpandedDescriptions] = useState<Record<string, boolean>>({})
-  const { theme } = useTheme()
-  const t = useTranslations("service") // Using the correct namespace
-
-  const modalContentRef = useRef<HTMLDivElement>(null)
-
-  const [deleteProcedure, { isLoading: isDeleting }] = useDeleteProcedureMutation()
-  const [updateProcedure, { isLoading: isUpdating }] = useUpdateProcedureMutation()
-  const [deletingId, setDeletingId] = useState<string | null>(null)
-  const [editingId, setEditingId] = useState<string | null>(null)
-  const [editProcedureData, setEditProcedureData] = useState<any>(null)
-  const [editorLoaded, setEditorLoaded] = useState(false)
+export default function ViewServiceModal({
+  viewService,
+  onClose,
+  refetchService,
+}: ViewServiceModalProps) {
+  const [activeTab, setActiveTab] = useState("overview");
+  const [categories, setCategories] = useState([]);
+  const [expandedDescriptions, setExpandedDescriptions] = useState<
+    Record<string, boolean>
+  >({});
+  const { theme } = useTheme();
+  const t = useTranslations("service"); // Using the correct namespace
+
+  const modalContentRef = useRef<HTMLDivElement>(null);
+
+  const [deleteProcedure, { isLoading: isDeleting }] =
+    useDeleteProcedureMutation();
+  const [updateProcedure, { isLoading: isUpdating }] =
+    useUpdateProcedureMutation();
+  const [deletingId, setDeletingId] = useState<string | null>(null);
+  const [editingId, setEditingId] = useState<string | null>(null);
+  const [editProcedureData, setEditProcedureData] = useState<any>(null);
+  const [editorLoaded, setEditorLoaded] = useState(false);
 
   // State for inline editing
-  const [editingProcedures, setEditingProcedures] = useState<Record<string, EditingProcedure>>({})
+  const [editingProcedures, setEditingProcedures] = useState<
+    Record<string, EditingProcedure>
+  >({});
 
   // Add this state for the custom confirmation dialog
-  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false)
-  const [procedureToDelete, setProcedureToDelete] = useState<string | null>(null)
+  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
+  const [procedureToDelete, setProcedureToDelete] = useState<string | null>(
+    null
+  );
 
   // Ensure editor is loaded
   useEffect(() => {
-    setEditorLoaded(true)
-  }, [])
+    setEditorLoaded(true);
+  }, []);
 
   // Memoized scroll handler to prevent recreation on every render
 
@@ -111,25 +128,25 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
 
   // Hàm xử lý xóa procedure
   const handleDeleteProcedure = async (id: string) => {
-    if (!id) return
+    if (!id) return;
 
     try {
-      setDeletingId(id)
-      await deleteProcedure({ id }).unwrap()
-      toast.success(t("deleteProcedureSuccess"))
+      setDeletingId(id);
+      await deleteProcedure({ id }).unwrap();
+      toast.success(t("deleteProcedureSuccess"));
       // Refresh data after deletion
-      handleRefresh()
+      handleRefresh();
     } catch (error) {
-      console.error("Failed to delete procedure:", error)
-      toast.error(t("deleteProcedureError"))
+      console.error("Failed to delete procedure:", error);
+      toast.error(t("deleteProcedureError"));
     } finally {
-      setDeletingId(null)
+      setDeletingId(null);
     }
-  }
+  };
 
   // Fix the handleStartEditProcedure function
   const handleStartEditProcedure = (procedure: Procedure) => {
-    if (!procedure || !procedure.id) return
+    if (!procedure || !procedure.id) return;
 
     // Create a properly typed object for the editing state
     const editingProcedure: EditingProcedure = {
@@ -144,62 +161,72 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           duration: pt.duration || 30,
           isDefault: pt.isDefault || false,
         })) || [],
-    }
+    };
 
     // Update the state with the properly typed object
     setEditingProcedures((prev) => ({
       ...prev,
       [procedure.id]: editingProcedure,
-    }))
+    }));
 
-    setEditingId(procedure.id)
-  }
+    setEditingId(procedure.id);
+  };
 
   // Hàm hủy chỉnh sửa procedure
   const handleCancelEditProcedure = () => {
-    setEditingId(null)
-  }
+    setEditingId(null);
+  };
 
   // Hàm cập nhật dữ liệu khi chỉnh sửa
-  const handleEditProcedureChange = (procedureId: string, field: string, value: any) => {
+  const handleEditProcedureChange = (
+    procedureId: string,
+    field: string,
+    value: any
+  ) => {
     setEditingProcedures((prev) => ({
       ...prev,
       [procedureId]: {
         ...prev[procedureId],
         [field]: value,
       },
-    }))
-  }
+    }));
+  };
 
   // Hàm cập nhật dữ liệu price type khi chỉnh sửa
-  const handleEditPriceTypeChange = (procedureId: string, index: number, field: string, value: any) => {
-    const updatedProcedure = { ...editingProcedures[procedureId] }
-    const updatedPriceTypes = [...updatedProcedure.procedurePriceTypes]
+  const handleEditPriceTypeChange = (
+    procedureId: string,
+    index: number,
+    field: string,
+    value: any
+  ) => {
+    const updatedProcedure = { ...editingProcedures[procedureId] };
+    const updatedPriceTypes = [...updatedProcedure.procedurePriceTypes];
 
     if (field === "isDefault" && value === true) {
       // If setting this one as default, unset others
       updatedPriceTypes.forEach((pt, i) => {
-        pt.isDefault = i === index
-      })
+        pt.isDefault = i === index;
+      });
     } else {
       updatedPriceTypes[index] = {
         ...updatedPriceTypes[index],
-        [field]: field === "price" || field === "duration" ? Number(value) : value,
-      }
+        [field]:
+          field === "price" || field === "duration" ? Number(value) : value,
+      };
     }
 
-    updatedProcedure.procedurePriceTypes = updatedPriceTypes
+    updatedProcedure.procedurePriceTypes = updatedPriceTypes;
 
     setEditingProcedures({
       ...editingProcedures,
       [procedureId]: updatedProcedure,
-    })
-  }
+    });
+  };
 
   // Hàm thêm price type mới khi chỉnh sửa
   const handleAddPriceType = (procedureId: string) => {
-    const updatedProcedure = { ...editingProcedures[procedureId] }
-    const isDefault = updatedProcedure.procedurePriceTypes.length === 0
+    const updatedProcedure = { ...editingProcedures[procedureId] };
+    const isDefault = updatedProcedure.procedurePriceTypes.length === 0;
 
     updatedProcedure.procedurePriceTypes = [
       ...updatedProcedure.procedurePriceTypes,
@@ -209,57 +236,57 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
         duration: 30,
         isDefault: isDefault,
       },
-    ]
+    ];
 
     setEditingProcedures({
       ...editingProcedures,
       [procedureId]: updatedProcedure,
-    })
-  }
+    });
+  };
 
   // Hàm xóa price type khi chỉnh sửa
   const handleRemovePriceType = (procedureId: string, index: number) => {
-    const updatedProcedure = { ...editingProcedures[procedureId] }
-    const updatedPriceTypes = [...updatedProcedure.procedurePriceTypes]
-    const isRemovingDefault = updatedPriceTypes[index].isDefault
+    const updatedProcedure = { ...editingProcedures[procedureId] };
+    const updatedPriceTypes = [...updatedProcedure.procedurePriceTypes];
+    const isRemovingDefault = updatedPriceTypes[index].isDefault;
 
-    updatedPriceTypes.splice(index, 1)
+    updatedPriceTypes.splice(index, 1);
 
     // If we removed the default and there are other price types, set the first one as default
     if (isRemovingDefault && updatedPriceTypes.length > 0) {
-      updatedPriceTypes[0].isDefault = true
+      updatedPriceTypes[0].isDefault = true;
     }
 
-    updatedProcedure.procedurePriceTypes = updatedPriceTypes
+    updatedProcedure.procedurePriceTypes = updatedPriceTypes;
 
     setEditingProcedures({
       ...editingProcedures,
       [procedureId]: updatedProcedure,
-    })
-  }
+    });
+  };
 
   // Hàm lưu thay đổi procedure
   const handleSaveProcedure = async (procedureId: string) => {
-    if (!procedureId || !viewService?.id) return
+    if (!procedureId || !viewService?.id) return;
 
     try {
-      const editData = editingProcedures[procedureId]
+      const editData = editingProcedures[procedureId];
 
       // Validate data
       if (!editData.name.trim()) {
-        toast.error(t("procedureNameRequired"))
-        return
+        toast.error(t("procedureNameRequired"));
+        return;
       }
 
       if (editData.procedurePriceTypes.length === 0) {
-        toast.error(t("priceTypeRequired"))
-        return
+        toast.error(t("priceTypeRequired"));
+        return;
       }
 
       // Ensure at least one price type is set as default
       if (!editData.procedurePriceTypes.some((pt) => pt.isDefault)) {
-        toast.error(t("defaultPriceTypeRequired"))
-        return
+        toast.error(t("defaultPriceTypeRequired"));
+        return;
       }
 
       // Format data for API
@@ -275,56 +302,58 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           duration: pt.duration,
           isDefault: pt.isDefault,
         })),
-      }
+      };
 
       await updateProcedure({
         id: procedureId,
         data: updateData as any,
-      }).unwrap()
+      }).unwrap();
 
-      toast.success(t("updateProcedureSuccess"))
-      setEditingId(null)
-      handleRefresh()
+      toast.success(t("updateProcedureSuccess"));
+      setEditingId(null);
+      handleRefresh();
     } catch (error) {
-      console.error("Failed to update procedure:", error)
-      toast.error(t("updateProcedureError"))
+      console.error("Failed to update procedure:", error);
+      toast.error(t("updateProcedureError"));
     }
-  }
+  };
 
   // Hàm refresh sẽ gọi refetchService từ component cha nếu có
   const handleRefresh = async () => {
     if (refetchService) {
-      await refetchService()
+      await refetchService();
     }
-  }
+  };
 
-  if (!viewService) return null
+  if (!viewService) return null;
 
   // Helper function to safely extract URLs from ImageObjects
   function getImageUrl(image: any): string {
-    if (!image) return "/placeholder.svg"
-    if (typeof image === "string") return image
+    if (!image) return "/placeholder.svg";
+    if (typeof image === "string") return image;
     if (typeof image === "object" && image !== null) {
       // Handle ImageObject with url property
-      if (image.url && typeof image.url === "string") return image.url
+      if (image.url && typeof image.url === "string") return image.url;
       // Handle toString() method if available
       if (typeof image.toString === "function") {
-        const str = image.toString()
-        if (typeof str === "string" && str !== "[object Object]") return str
+        const str = image.toString();
+        if (typeof str === "string" && str !== "[object Object]") return str;
       }
     }
-    return "/placeholder.svg"
+    return "/placeholder.svg";
   }
 
   // Get the first image for the avatar
-  const avatarImage = viewService.coverImage?.length ? getImageUrl(viewService.coverImage[0]) : "/placeholder.svg"
+  const avatarImage = viewService.coverImage?.length
+    ? getImageUrl(viewService.coverImage[0])
+    : "/placeholder.svg";
 
   const toggleDescriptionExpand = (procedureId: string) => {
     setExpandedDescriptions((prev) => ({
       ...prev,
       [procedureId]: !prev[procedureId],
-    }))
-  }
+    }));
+  };
 
   return (
     <ModalService onClose={onClose} customContent={true}>
@@ -336,7 +365,9 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
         <div className="sticky top-0 z-20 bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800 shadow-sm rounded-t-xl">
           <div className="px-6 pt-6 pb-3 space-y-3">
             <div className="flex items-center justify-between">
-              <h2 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-gray-100">{viewService.name}</h2>
+              <h2 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-gray-100">
+                {viewService.name}
+              </h2>
 
               <Badge variant="destructive" className="text-sm px-3 py-1">
                 -{viewService.discountPercent}% {t("discount")}
@@ -355,14 +386,24 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
               )}
 
               <div className="text-xl font-semibold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-500 dark:from-pink-300 dark:to-purple-300">
-                {new Intl.NumberFormat("vi-VN").format(Number(viewService.minPrice || 0))} -{" "}
-                {new Intl.NumberFormat("vi-VN").format(Number(viewService.maxPrice || 0))} đ
+                {new Intl.NumberFormat("vi-VN").format(
+                  Number(viewService.minPrice || 0)
+                )}{" "}
+                -{" "}
+                {new Intl.NumberFormat("vi-VN").format(
+                  Number(viewService.maxPrice || 0)
+                )}{" "}
+                đ
               </div>
             </div>
           </div>
 
           <div className="px-6 py-2 bg-white dark:bg-gray-900">
-            <Tabs defaultValue="overview" className="w-full" onValueChange={setActiveTab}>
+            <Tabs
+              defaultValue="overview"
+              className="w-full"
+              onValueChange={setActiveTab}
+            >
               <TabsList className="grid grid-cols-4 dark:bg-gray-800">
                 <TabsTrigger
                   value="overview"
@@ -399,7 +440,12 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
 
         {/* Content area */}
         <div className="px-6 pt-6 space-y-6">
-          <Tabs defaultValue="overview" value={activeTab} className="w-full" onValueChange={setActiveTab}>
+          <Tabs
+            defaultValue="overview"
+            value={activeTab}
+            className="w-full"
+            onValueChange={setActiveTab}
+          >
             {/* Overview Tab */}
             <TabsContent value="overview" className="space-y-6">
               {/* Mô tả dịch vụ với avatar nhỏ bên cạnh */}
@@ -414,24 +460,30 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                       {/* Parse description to extract images and text */}
                       {(() => {
                         // If description is not available, return null
-                        if (!viewService.description) return null
+                        if (!viewService.description) return null;
 
                         // Create a temporary DOM element to parse the HTML
-                        const tempDiv = document.createElement("div")
-                        tempDiv.innerHTML = viewService.description
+                        const tempDiv = document.createElement("div");
+                        tempDiv.innerHTML = viewService.description;
 
                         // Extract all images from the description
-                        const images = Array.from(tempDiv.querySelectorAll("img"))
-                        const extractedImages = images.map((img) => img.src)
+                        const images = Array.from(
+                          tempDiv.querySelectorAll("img")
+                        );
+                        const extractedImages = images.map((img) => img.src);
 
                         // Remove images from the description text
-                        images.forEach((img) => img.parentNode?.removeChild(img))
-                        const textContent = tempDiv.innerHTML
+                        images.forEach((img) =>
+                          img.parentNode?.removeChild(img)
+                        );
+                        const textContent = tempDiv.innerHTML;
 
                         return (
                           <>
                             {/* Display the text content */}
-                            <div dangerouslySetInnerHTML={{ __html: textContent }} />
+                            <div
+                              dangerouslySetInnerHTML={{ __html: textContent }}
+                            />
 
                             {/* Display extracted images */}
                             {extractedImages.length > 0 && (
@@ -452,7 +504,7 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                               </div>
                             )}
                           </>
-                        )
+                        );
                       })()}
                     </div>
                   </div>
@@ -466,21 +518,35 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                   </h3>
                   <div className="space-y-2">
                     <div className="flex justify-between">
-                      <span className="text-gray-600 dark:text-gray-400">{t("minPrice")}</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("minPrice")}
+                      </span>
                       <span className="font-medium text-purple-700 dark:text-purple-300">
-                        {new Intl.NumberFormat("vi-VN").format(Number(viewService.minPrice || 0))} đ
+                        {new Intl.NumberFormat("vi-VN").format(
+                          Number(viewService.minPrice || 0)
+                        )}{" "}
+                        đ
                       </span>
                     </div>
                     <div className="flex justify-between">
-                      <span className="text-gray-600 dark:text-gray-400">{t("maxPrice")}</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("maxPrice")}
+                      </span>
                       <span className="font-medium text-purple-700 dark:text-purple-300">
-                        {new Intl.NumberFormat("vi-VN").format(Number(viewService.maxPrice || 0))} đ
+                        {new Intl.NumberFormat("vi-VN").format(
+                          Number(viewService.maxPrice || 0)
+                        )}{" "}
+                        đ
                       </span>
                     </div>
 
                     <div className="flex justify-between">
-                      <span className="text-gray-600 dark:text-gray-400">{t("discount")}</span>
-                      <span className="font-medium text-red-600 dark:text-red-300">{viewService.discountPercent}%</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("discount")}
+                      </span>
+                      <span className="font-medium text-red-600 dark:text-red-300">
+                        {viewService.discountPercent}%
+                      </span>
                     </div>
                   </div>
                 </div>
@@ -492,43 +558,52 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                   <div className="space-y-2">
                     <div className="flex items-center gap-2">
                       <Calendar className="w-4 h-4 text-purple-500 dark:text-purple-400" />
-                      <span className="text-gray-600 dark:text-gray-400">{t("bookingTime")}</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("bookingTime")}
+                      </span>
                     </div>
                     <div className="flex items-center gap-2">
                       <Clock className="w-4 h-4 text-purple-500 dark:text-purple-400" />
-                      <span className="text-gray-600 dark:text-gray-400">{t("executionTime")}</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("executionTime")}
+                      </span>
                     </div>
                     <div className="flex items-center gap-2">
                       <Star className="w-4 h-4 text-purple-500 dark:text-purple-400" />
-                      <span className="text-gray-600 dark:text-gray-400">{t("rating")}</span>
+                      <span className="text-gray-600 dark:text-gray-400">
+                        {t("rating")}
+                      </span>
                     </div>
                   </div>
                 </div>
               </div>
 
               {/* Thêm phần hiển thị ảnh mô tả */}
-              {viewService.descriptionImage && viewService.descriptionImage.length > 0 && (
-                <div className="p-5 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700">
-                  <h3 className="text-lg font-medium text-gray-800 dark:text-gray-100 mb-3">
-                    {t("descriptionImages")}
-                  </h3>
-                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
-                    {viewService.descriptionImage.map((image: any, index: number) => (
-                      <div
-                        key={index}
-                        className="relative aspect-square rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700"
-                      >
-                        <Image
-                          src={getImageUrl(image) || "/placeholder.svg"}
-                          alt={`${t("description")} ${index + 1}`}
-                          fill
-                          className="object-cover hover:scale-105 transition-transform duration-300"
-                        />
-                      </div>
-                    ))}
+              {viewService.descriptionImage &&
+                viewService.descriptionImage.length > 0 && (
+                  <div className="p-5 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700">
+                    <h3 className="text-lg font-medium text-gray-800 dark:text-gray-100 mb-3">
+                      {t("descriptionImages")}
+                    </h3>
+                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
+                      {viewService.descriptionImage.map(
+                        (image: any, index: number) => (
+                          <div
+                            key={index}
+                            className="relative aspect-square rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700"
+                          >
+                            <Image
+                              src={getImageUrl(image) || "/placeholder.svg"}
+                              alt={`${t("description")} ${index + 1}`}
+                              fill
+                              className="object-cover hover:scale-105 transition-transform duration-300"
+                            />
+                          </div>
+                        )
+                      )}
+                    </div>
                   </div>
-                </div>
-              )}
+                )}
 
               {/* Hiển thị tất cả ảnh bìa */}
               {viewService.coverImage && viewService.coverImage.length > 0 && (
@@ -574,7 +649,10 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                         <div className="relative w-24 h-24 rounded-lg overflow-hidden shadow-sm">
                           {clinic.profilePictureUrl ? (
                             <Image
-                              src={getImageUrl(clinic.profilePictureUrl) || "/placeholder.svg"}
+                              src={
+                                getImageUrl(clinic.profilePictureUrl) ||
+                                "/placeholder.svg"
+                              }
                               alt={clinic.name}
                               fill
                               className={`object-cover transition-transform duration-300 group-hover:scale-110 ${
@@ -590,16 +668,24 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
 
                         <div className="flex-1 space-y-3">
                           <div className="flex items-center justify-between">
-                            <h4 className="font-medium text-lg text-gray-800 dark:text-gray-100">{clinic.name}</h4>
+                            <h4 className="font-medium text-lg text-gray-800 dark:text-gray-100">
+                              {clinic.name}
+                            </h4>
                             <Badge
-                              variant={clinic.isActivated !== false ? "success" : "destructive"}
+                              variant={
+                                clinic.isActivated !== false
+                                  ? "success"
+                                  : "destructive"
+                              }
                               className={`ml-2 ${
                                 clinic.isActivated !== false
                                   ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
                                   : "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400"
                               }`}
                             >
-                              {clinic.isActivated !== false ? t("active") : t("inactive")}
+                              {clinic.isActivated !== false
+                                ? t("active")
+                                : t("inactive")}
                             </Badge>
                           </div>
                           <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
@@ -627,7 +713,9 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                   <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-1">
                     {t("noClinics")}
                   </h3>
-                  <p className="text-gray-500 dark:text-gray-400">{t("noClinicDescription")}</p>
+                  <p className="text-gray-500 dark:text-gray-400">
+                    {t("noClinicDescription")}
+                  </p>
                 </div>
               )}
             </TabsContent>
@@ -636,388 +724,483 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
             <TabsContent value="procedures" className="space-y-4 tabs-content">
               {viewService.procedures && viewService.procedures.length > 0 ? (
                 <div className="space-y-4">
-                  {viewService.procedures.map((procedure: Procedure, index: number) => (
-                    <motion.div
-                      key={procedure.id}
-                      initial={{ opacity: 0, y: 20 }}
-                      animate={{ opacity: 1, y: 0 }}
-                      transition={{ delay: index * 0.1 }}
-                      className="group bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden border border-gray-100 dark:border-gray-700"
-                    >
-                      {editingId === procedure.id ? (
-                        // Editing mode
-                        <div className="p-5 space-y-6">
-                          <div className="flex justify-between items-center">
-                            <h4 className="text-lg font-medium text-blue-600 dark:text-blue-400">
-                              {t("editProcedure")}
-                            </h4>
-                            <div className="flex items-center gap-2">
-                              <button
-                                onClick={() => handleSaveProcedure(procedure.id)}
-                                disabled={isUpdating}
-                                className="p-2 bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-800/50 rounded-full transition-colors flex items-center gap-1"
-                              >
-                                <Save className="w-4 h-4" />
-                                <span className="text-sm">{t("save")}</span>
-                              </button>
-                              <button
-                                onClick={handleCancelEditProcedure}
-                                className="p-2 bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full transition-colors flex items-center gap-1"
-                              >
-                                <X className="w-4 h-4" />
-                                <span className="text-sm">{t("cancel")}</span>
-                              </button>
-                            </div>
-                          </div>
-
-                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                            <div className="space-y-2">
-                              <Label htmlFor={`name-${procedure.id}`} className="text-gray-700 dark:text-gray-300">
-                                {t("procedureName")}
-                              </Label>
-                              <Input
-                                id={`name-${procedure.id}`}
-                                value={editingProcedures[procedure.id].name}
-                                onChange={(e) => handleEditProcedureChange(procedure.id, "name", e.target.value)}
-                                placeholder={t("procedureName")}
-                                className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
-                              />
+                  {viewService.procedures.map(
+                    (procedure: Procedure, index: number) => (
+                      <motion.div
+                        key={procedure.id}
+                        initial={{ opacity: 0, y: 20 }}
+                        animate={{ opacity: 1, y: 0 }}
+                        transition={{ delay: index * 0.1 }}
+                        className="group bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden border border-gray-100 dark:border-gray-700"
+                      >
+                        {editingId === procedure.id ? (
+                          // Editing mode
+                          <div className="p-5 space-y-6">
+                            <div className="flex justify-between items-center">
+                              <h4 className="text-lg font-medium text-blue-600 dark:text-blue-400">
+                                {t("editProcedure")}
+                              </h4>
+                              <div className="flex items-center gap-2">
+                                <button
+                                  onClick={() =>
+                                    handleSaveProcedure(procedure.id)
+                                  }
+                                  disabled={isUpdating}
+                                  className="p-2 bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-800/50 rounded-full transition-colors flex items-center gap-1"
+                                >
+                                  <Save className="w-4 h-4" />
+                                  <span className="text-sm">{t("save")}</span>
+                                </button>
+                                <button
+                                  onClick={handleCancelEditProcedure}
+                                  className="p-2 bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full transition-colors flex items-center gap-1"
+                                >
+                                  <X className="w-4 h-4" />
+                                  <span className="text-sm">{t("cancel")}</span>
+                                </button>
+                              </div>
                             </div>
 
-                            <div className="space-y-2">
-                              <Label htmlFor={`stepIndex-${procedure.id}`} className="text-gray-700 dark:text-gray-300">
-                                {t("stepOrder")}
-                              </Label>
-                              <Input
-                                id={`stepIndex-${procedure.id}`}
-                                type="number"
-                                min="1"
-                                value={editingProcedures[procedure.id].stepIndex}
-                                onChange={(e) =>
-                                  handleEditProcedureChange(procedure.id, "stepIndex", Number(e.target.value))
-                                }
-                                className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
-                              />
-                            </div>
-                          </div>
+                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+                              <div className="space-y-2">
+                                <Label
+                                  htmlFor={`name-${procedure.id}`}
+                                  className="text-gray-700 dark:text-gray-300"
+                                >
+                                  {t("procedureName")}
+                                </Label>
+                                <Input
+                                  id={`name-${procedure.id}`}
+                                  value={editingProcedures[procedure.id].name}
+                                  onChange={(e) =>
+                                    handleEditProcedureChange(
+                                      procedure.id,
+                                      "name",
+                                      e.target.value
+                                    )
+                                  }
+                                  placeholder={t("procedureName")}
+                                  className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
+                                />
+                              </div>
 
-                          {/* Add a clear div after the QuillEditor to ensure proper spacing */}
-                          <div className="space-y-2">
-                            <Label htmlFor={`description-${procedure.id}`} className="text-gray-700 dark:text-gray-300">
-                              {t("description")}
-                            </Label>
-                            <div className="quill-editor-container">
-                              {editorLoaded && (
-                                <QuillEditor
-                                  value={editingProcedures[procedure.id].description}
-                                  onChange={(value) => handleEditProcedureChange(procedure.id, "description", value)}
-                                  placeholder={t("description")}
+                              <div className="space-y-2">
+                                <Label
+                                  htmlFor={`stepIndex-${procedure.id}`}
+                                  className="text-gray-700 dark:text-gray-300"
+                                >
+                                  {t("stepOrder")}
+                                </Label>
+                                <Input
+                                  id={`stepIndex-${procedure.id}`}
+                                  type="number"
+                                  min="1"
+                                  value={
+                                    editingProcedures[procedure.id].stepIndex
+                                  }
+                                  onChange={(e) =>
+                                    handleEditProcedureChange(
+                                      procedure.id,
+                                      "stepIndex",
+                                      Number(e.target.value)
+                                    )
+                                  }
+                                  className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
                                 />
-                              )}
+                              </div>
                             </div>
-                            {/* Add a clear div to prevent overlap */}
-                            <div className="clear-both h-24"></div>
-                          </div>
 
-                          {/* Price Types - Added more spacing here */}
-                          <div className="mt-16 pt-8 space-y-6 relative z-30 price-types-section dark:bg-gray-800">
-                            <div className="flex items-center justify-between">
-                              <Label className="text-base font-medium text-gray-700 dark:text-gray-300">
-                                {t("priceTypes")}
-                              </Label>
-                              <button
-                                type="button"
-                                onClick={() => handleAddPriceType(procedure.id)}
-                                className="flex items-center gap-1 px-3 py-1.5 rounded-md bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors relative z-30"
+                            {/* Add a clear div after the QuillEditor to ensure proper spacing */}
+                            <div className="space-y-2">
+                              <Label
+                                htmlFor={`description-${procedure.id}`}
+                                className="text-gray-700 dark:text-gray-300"
                               >
-                                <Plus className="w-4 h-4" /> {t("addPriceType")}
-                              </button>
+                                {t("description")}
+                              </Label>
+                              <div className="quill-editor-container">
+                                {editorLoaded && (
+                                  <QuillEditor
+                                    value={
+                                      editingProcedures[procedure.id]
+                                        .description
+                                    }
+                                    onChange={(value) =>
+                                      handleEditProcedureChange(
+                                        procedure.id,
+                                        "description",
+                                        value
+                                      )
+                                    }
+                                    placeholder={t("description")}
+                                  />
+                                )}
+                              </div>
+                              {/* Add a clear div to prevent overlap */}
+                              <div className="clear-both h-24"></div>
                             </div>
 
-                            {editingProcedures[procedure.id].procedurePriceTypes.length === 0 ? (
-                              <div className="text-center py-6 text-gray-500 dark:text-gray-400 text-sm border border-dashed border-gray-300 dark:border-gray-600 rounded-md">
-                                {t("noPriceTypes")}
+                            {/* Price Types - Added more spacing here */}
+                            <div className="mt-16 pt-8 space-y-6 relative z-30 price-types-section dark:bg-gray-800">
+                              <div className="flex items-center justify-between">
+                                <Label className="text-base font-medium text-gray-700 dark:text-gray-300">
+                                  {t("priceTypes")}
+                                </Label>
+                                <button
+                                  type="button"
+                                  onClick={() =>
+                                    handleAddPriceType(procedure.id)
+                                  }
+                                  className="flex items-center gap-1 px-3 py-1.5 rounded-md bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors relative z-30"
+                                >
+                                  <Plus className="w-4 h-4" />{" "}
+                                  {t("addPriceType")}
+                                </button>
                               </div>
-                            ) : (
-                              <div className="space-y-6">
-                                {editingProcedures[procedure.id].procedurePriceTypes.map((priceType, ptIndex) => (
-                                  <div
-                                    key={ptIndex}
-                                    className="p-5 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600"
-                                  >
-                                    <div className="grid grid-cols-2 gap-4 mb-4">
-                                      <div className="space-y-2">
-                                        <Label
-                                          htmlFor={`priceName-${procedure.id}-${ptIndex}`}
-                                          className="text-gray-700 dark:text-gray-300"
-                                        >
-                                          {t("priceTypeName")}
-                                        </Label>
-                                        <Input
-                                          id={`priceName-${procedure.id}-${ptIndex}`}
-                                          value={priceType.name}
-                                          onChange={(e) =>
-                                            handleEditPriceTypeChange(procedure.id, ptIndex, "name", e.target.value)
-                                          }
-                                          placeholder={t("priceTypeName")}
-                                          className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
-                                        />
-                                      </div>
-                                      <div className="space-y-2">
-                                        <Label
-                                          htmlFor={`priceValue-${procedure.id}-${ptIndex}`}
-                                          className="text-gray-700 dark:text-gray-300"
-                                        >
-                                          {t("priceValue")}
-                                        </Label>
-                                        <Input
-                                          id={`priceValue-${procedure.id}-${ptIndex}`}
-                                          type="number"
-                                          min="0"
-                                          value={priceType.price}
-                                          onChange={(e) =>
-                                            handleEditPriceTypeChange(procedure.id, ptIndex, "price", e.target.value)
-                                          }
-                                          placeholder={t("priceValue")}
-                                          className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
-                                        />
-                                      </div>
-                                    </div>
 
-                                    <div className="grid grid-cols-2 gap-4 mb-4">
-                                      <div className="space-y-2">
-                                        <Label
-                                          htmlFor={`duration-${procedure.id}-${ptIndex}`}
-                                          className="text-gray-700 dark:text-gray-300"
-                                        >
-                                          {t("duration")}
-                                        </Label>
-                                        <Input
-                                          id={`duration-${procedure.id}-${ptIndex}`}
-                                          type="number"
-                                          min="1"
-                                          value={priceType.duration}
-                                          onChange={(e) =>
-                                            handleEditPriceTypeChange(procedure.id, ptIndex, "duration", e.target.value)
-                                          }
-                                          placeholder={t("duration")}
-                                          className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
-                                        />
-                                      </div>
-                                      <div className="flex items-center h-full pt-8">
-                                        <div className="flex items-center space-x-2">
-                                          <Checkbox
-                                            id={`isDefault-${procedure.id}-${ptIndex}`}
-                                            checked={priceType.isDefault}
-                                            onCheckedChange={(checked) =>
-                                              handleEditPriceTypeChange(
+                              {editingProcedures[procedure.id]
+                                .procedurePriceTypes.length === 0 ? (
+                                <div className="text-center py-6 text-gray-500 dark:text-gray-400 text-sm border border-dashed border-gray-300 dark:border-gray-600 rounded-md">
+                                  {t("noPriceTypes")}
+                                </div>
+                              ) : (
+                                <div className="space-y-6">
+                                  {editingProcedures[
+                                    procedure.id
+                                  ].procedurePriceTypes.map(
+                                    (priceType, ptIndex) => (
+                                      <div
+                                        key={ptIndex}
+                                        className="p-5 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600"
+                                      >
+                                        <div className="grid grid-cols-2 gap-4 mb-4">
+                                          <div className="space-y-2">
+                                            <Label
+                                              htmlFor={`priceName-${procedure.id}-${ptIndex}`}
+                                              className="text-gray-700 dark:text-gray-300"
+                                            >
+                                              {t("priceTypeName")}
+                                            </Label>
+                                            <Input
+                                              id={`priceName-${procedure.id}-${ptIndex}`}
+                                              value={priceType.name}
+                                              onChange={(e) =>
+                                                handleEditPriceTypeChange(
+                                                  procedure.id,
+                                                  ptIndex,
+                                                  "name",
+                                                  e.target.value
+                                                )
+                                              }
+                                              placeholder={t("priceTypeName")}
+                                              className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
+                                            />
+                                          </div>
+                                          <div className="space-y-2">
+                                            <Label
+                                              htmlFor={`priceValue-${procedure.id}-${ptIndex}`}
+                                              className="text-gray-700 dark:text-gray-300"
+                                            >
+                                              {t("priceValue")}
+                                            </Label>
+                                            <Input
+                                              id={`priceValue-${procedure.id}-${ptIndex}`}
+                                              type="number"
+                                              min="0"
+                                              value={priceType.price}
+                                              onChange={(e) =>
+                                                handleEditPriceTypeChange(
+                                                  procedure.id,
+                                                  ptIndex,
+                                                  "price",
+                                                  e.target.value
+                                                )
+                                              }
+                                              placeholder={t("priceValue")}
+                                              className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
+                                            />
+                                          </div>
+                                        </div>
+
+                                        <div className="grid grid-cols-2 gap-4 mb-4">
+                                          <div className="space-y-2">
+                                            <Label
+                                              htmlFor={`duration-${procedure.id}-${ptIndex}`}
+                                              className="text-gray-700 dark:text-gray-300"
+                                            >
+                                              {t("duration")}
+                                            </Label>
+                                            <Input
+                                              id={`duration-${procedure.id}-${ptIndex}`}
+                                              type="number"
+                                              min="1"
+                                              value={priceType.duration}
+                                              onChange={(e) =>
+                                                handleEditPriceTypeChange(
+                                                  procedure.id,
+                                                  ptIndex,
+                                                  "duration",
+                                                  e.target.value
+                                                )
+                                              }
+                                              placeholder={t("duration")}
+                                              className="border-gray-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
+                                            />
+                                          </div>
+                                          <div className="flex items-center h-full pt-8">
+                                            <div className="flex items-center space-x-2">
+                                              <Checkbox
+                                                id={`isDefault-${procedure.id}-${ptIndex}`}
+                                                checked={priceType.isDefault}
+                                                onCheckedChange={(checked) =>
+                                                  handleEditPriceTypeChange(
+                                                    procedure.id,
+                                                    ptIndex,
+                                                    "isDefault",
+                                                    Boolean(checked)
+                                                  )
+                                                }
+                                              />
+                                              <Label
+                                                htmlFor={`isDefault-${procedure.id}-${ptIndex}`}
+                                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 dark:text-gray-300"
+                                              >
+                                                {t("setAsDefault")}
+                                              </Label>
+                                            </div>
+                                          </div>
+                                        </div>
+
+                                        <div className="flex justify-end mt-2">
+                                          <button
+                                            type="button"
+                                            onClick={() =>
+                                              handleRemovePriceType(
                                                 procedure.id,
-                                                ptIndex,
-                                                "isDefault",
-                                                Boolean(checked),
+                                                ptIndex
                                               )
                                             }
-                                          />
-                                          <Label
-                                            htmlFor={`isDefault-${procedure.id}-${ptIndex}`}
-                                            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 dark:text-gray-300"
+                                            className="flex items-center gap-1 text-red-500 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300"
                                           >
-                                            {t("setAsDefault")}
-                                          </Label>
+                                            <Trash2 className="w-4 h-4" />
+                                            <span className="text-sm">
+                                              {t("delete")}
+                                            </span>
+                                          </button>
                                         </div>
                                       </div>
-                                    </div>
-
-                                    <div className="flex justify-end mt-2">
-                                      <button
-                                        type="button"
-                                        onClick={() => handleRemovePriceType(procedure.id, ptIndex)}
-                                        className="flex items-center gap-1 text-red-500 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300"
-                                      >
-                                        <Trash2 className="w-4 h-4" />
-                                        <span className="text-sm">{t("delete")}</span>
-                                      </button>
-                                    </div>
-                                  </div>
-                                ))}
-                              </div>
-                            )}
+                                    )
+                                  )}
+                                </div>
+                              )}
+                            </div>
                           </div>
-                        </div>
-                      ) : (
-                        // View mode
-                        <div className="p-5">
-                          {/* Procedure Info */}
-                          <div className="space-y-4">
-                            <div className="flex justify-between items-start">
-                              <div className="flex items-center gap-2">
-                                <div className="px-2 py-1 rounded-md bg-purple-600 dark:bg-purple-700 text-white text-xs font-medium">
-                                  {t("step")} {procedure.stepIndex}
+                        ) : (
+                          // View mode
+                          <div className="p-5">
+                            {/* Procedure Info */}
+                            <div className="space-y-4">
+                              <div className="flex justify-between items-start">
+                                <div className="flex items-center gap-2">
+                                  <div className="px-2 py-1 rounded-md bg-purple-600 dark:bg-purple-700 text-white text-xs font-medium">
+                                    {t("step")} {procedure.stepIndex}
+                                  </div>
+                                  <h4 className="text-lg font-medium text-gray-800 dark:text-gray-100">
+                                    {procedure.name}
+                                  </h4>
                                 </div>
-                                <h4 className="text-lg font-medium text-gray-800 dark:text-gray-100">
-                                  {procedure.name}
-                                </h4>
-                              </div>
-
-                              {/* Action Buttons */}
-                              <div className="flex items-center gap-1">
-                                {/* Edit Button */}
-                                <button
-                                  onClick={(e) => {
-                                    e.stopPropagation()
-                                    handleStartEditProcedure(procedure)
-                                  }}
-                                  disabled={isUpdating && editingId === procedure.id}
-                                  className="p-2 text-gray-500 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-full transition-colors"
-                                >
-                                  <Pencil className="w-5 h-5" />
-                                </button>
 
-                                {/* Delete Button */}
-                                <button
-                                  onClick={(e) => {
-                                    e.stopPropagation()
-                                    setProcedureToDelete(procedure.id)
-                                    setConfirmDialogOpen(true)
-                                  }}
-                                  disabled={isDeleting && deletingId === procedure.id}
-                                  className="p-2 text-gray-500 dark:text-gray-400 hover:text-red-500 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-full transition-colors"
-                                >
-                                  <Trash2 className="w-5 h-5" />
-                                </button>
+                                {/* Action Buttons */}
+                                <div className="flex items-center gap-1">
+                                  {/* Edit Button */}
+                                  <button
+                                    onClick={(e) => {
+                                      e.stopPropagation();
+                                      handleStartEditProcedure(procedure);
+                                    }}
+                                    disabled={
+                                      isUpdating && editingId === procedure.id
+                                    }
+                                    className="p-2 text-gray-500 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-full transition-colors"
+                                  >
+                                    <Pencil className="w-5 h-5" />
+                                  </button>
+
+                                  {/* Delete Button */}
+                                  <button
+                                    onClick={(e) => {
+                                      e.stopPropagation();
+                                      setProcedureToDelete(procedure.id);
+                                      setConfirmDialogOpen(true);
+                                    }}
+                                    disabled={
+                                      isDeleting && deletingId === procedure.id
+                                    }
+                                    className="p-2 text-gray-500 dark:text-gray-400 hover:text-red-500 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-full transition-colors"
+                                  >
+                                    <Trash2 className="w-5 h-5" />
+                                  </button>
+                                </div>
                               </div>
-                            </div>
-
-                            {/* Improved description rendering with proper image handling and "See more" functionality */}
-                            {procedure.description && (
-                              <div className="text-gray-600 dark:text-gray-300 mt-2">
-                                {(() => {
-                                  // If description is not available, return empty
-                                  if (!procedure.description) return null
-
-                                  const isExpanded = expandedDescriptions[procedure.id] || false
-
-                                  // For collapsed state, we need to create a version with limited height
-                                  if (!isExpanded) {
-                                    // Create a temporary DOM element to measure text length
-                                    const tempDiv = document.createElement("div")
-                                    tempDiv.innerHTML = procedure.description
-                                    const textLength = tempDiv.textContent?.length || 0
 
+                              {/* Improved description rendering with proper image handling and "See more" functionality */}
+                              {procedure.description && (
+                                <div className="text-gray-600 dark:text-gray-300 mt-2">
+                                  {(() => {
+                                    // If description is not available, return empty
+                                    if (!procedure.description) return null;
+
+                                    const isExpanded =
+                                      expandedDescriptions[procedure.id] ||
+                                      false;
+
+                                    // For collapsed state, we need to create a version with limited height
+                                    if (!isExpanded) {
+                                      // Create a temporary DOM element to measure text length
+                                      const tempDiv =
+                                        document.createElement("div");
+                                      tempDiv.innerHTML = procedure.description;
+                                      const textLength =
+                                        tempDiv.textContent?.length || 0;
+
+                                      return (
+                                        <>
+                                          {/* Display the content with line limit */}
+                                          <div className="description-container collapsed">
+                                            <div
+                                              dangerouslySetInnerHTML={{
+                                                __html: procedure.description,
+                                              }}
+                                            />
+                                          </div>
+
+                                          {/* Toggle button - only show if content is long enough */}
+                                          {textLength > 100 && (
+                                            <button
+                                              onClick={() =>
+                                                toggleDescriptionExpand(
+                                                  procedure.id
+                                                )
+                                              }
+                                              className="mt-1 text-sm font-medium text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 transition-colors flex items-center"
+                                            >
+                                              {t("seeMore")}
+                                              <svg
+                                                className="ml-1 w-4 h-4"
+                                                fill="none"
+                                                stroke="currentColor"
+                                                viewBox="0 0 24 24"
+                                              >
+                                                <path
+                                                  strokeLinecap="round"
+                                                  strokeLinejoin="round"
+                                                  strokeWidth="2"
+                                                  d="M19 9l-7 7-7-7"
+                                                />
+                                              </svg>
+                                            </button>
+                                          )}
+                                        </>
+                                      );
+                                    }
+
+                                    // For expanded state, show full content
                                     return (
                                       <>
-                                        {/* Display the content with line limit */}
-                                        <div className="description-container collapsed">
-                                          <div dangerouslySetInnerHTML={{ __html: procedure.description }} />
+                                        {/* Display the full content */}
+                                        <div className="description-container expanded">
+                                          <div
+                                            dangerouslySetInnerHTML={{
+                                              __html: procedure.description,
+                                            }}
+                                          />
                                         </div>
 
-                                        {/* Toggle button - only show if content is long enough */}
-                                        {textLength > 100 && (
-                                          <button
-                                            onClick={() => toggleDescriptionExpand(procedure.id)}
-                                            className="mt-1 text-sm font-medium text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 transition-colors flex items-center"
+                                        {/* Toggle button to collapse */}
+                                        <button
+                                          onClick={() =>
+                                            toggleDescriptionExpand(
+                                              procedure.id
+                                            )
+                                          }
+                                          className="mt-1 text-sm font-medium text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 transition-colors flex items-center"
+                                        >
+                                          {t("collapse")}
+                                          <svg
+                                            className="ml-1 w-4 h-4 rotate-180"
+                                            fill="none"
+                                            stroke="currentColor"
+                                            viewBox="0 0 24 24"
                                           >
-                                            {t("seeMore")}
-                                            <svg
-                                              className="ml-1 w-4 h-4"
-                                              fill="none"
-                                              stroke="currentColor"
-                                              viewBox="0 0 24 24"
-                                            >
-                                              <path
-                                                strokeLinecap="round"
-                                                strokeLinejoin="round"
-                                                strokeWidth="2"
-                                                d="M19 9l-7 7-7-7"
-                                              />
-                                            </svg>
-                                          </button>
-                                        )}
+                                            <path
+                                              strokeLinecap="round"
+                                              strokeLinejoin="round"
+                                              strokeWidth="2"
+                                              d="M19 9l-7 7-7-7"
+                                            />
+                                          </svg>
+                                        </button>
                                       </>
-                                    )
-                                  }
-
-                                  // For expanded state, show full content
-                                  return (
-                                    <>
-                                      {/* Display the full content */}
-                                      <div className="description-container expanded">
-                                        <div dangerouslySetInnerHTML={{ __html: procedure.description }} />
-                                      </div>
-
-                                      {/* Toggle button to collapse */}
-                                      <button
-                                        onClick={() => toggleDescriptionExpand(procedure.id)}
-                                        className="mt-1 text-sm font-medium text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 transition-colors flex items-center"
-                                      >
-                                        {t("collapse")}
-                                        <svg
-                                          className="ml-1 w-4 h-4 rotate-180"
-                                          fill="none"
-                                          stroke="currentColor"
-                                          viewBox="0 0 24 24"
-                                        >
-                                          <path
-                                            strokeLinecap="round"
-                                            strokeLinejoin="round"
-                                            strokeWidth="2"
-                                            d="M19 9l-7 7-7-7"
-                                          />
-                                        </svg>
-                                      </button>
-                                    </>
-                                  )
-                                })()}
-                              </div>
-                            )}
+                                    );
+                                  })()}
+                                </div>
+                              )}
 
-                            {/* Price Types */}
-                            {procedure.procedurePriceTypes && procedure.procedurePriceTypes.length > 0 && (
-                              <div>
-                                <h5 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
-                                  {t("priceTypes")}:
-                                </h5>
-                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
-                                  {procedure.procedurePriceTypes.map((priceType: any) => (
-                                    <div
-                                      key={priceType.id}
-                                      className={`p-3 rounded-lg h-[120px] flex flex-col justify-between ${
-                                        priceType.isDefault
-                                          ? "bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/40 dark:to-pink-900/40 border border-purple-200 dark:border-purple-800"
-                                          : "bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border border-purple-100 dark:border-purple-900"
-                                      }`}
-                                    >
-                                      <div className="flex justify-between items-start">
-                                        <div
-                                          className="text-sm font-medium text-gray-600 dark:text-gray-300 truncate max-w-[70%]"
-                                          title={priceType.name}
-                                        >
-                                          {priceType.name}
-                                        </div>
-                                        {priceType.isDefault && (
-                                          <Badge className="bg-purple-500 dark:bg-purple-600 text-white text-xs shrink-0">
-                                            <Check className="w-3 h-3 mr-1" />
-                                            {t("default")}
-                                          </Badge>
-                                        )}
-                                      </div>
-                                      <div className="text-lg font-semibold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-500 dark:from-pink-300 dark:to-purple-300 mt-2">
-                                        {new Intl.NumberFormat("vi-VN").format(priceType.price)} đ
-                                      </div>
-                                      <div className="text-xs text-gray-500 dark:text-gray-400 mt-auto flex items-center">
-                                        <Clock className="w-3 h-3 mr-1 shrink-0" />
-                                        {priceType.duration || 30} {t("minutes")}
-                                      </div>
+                              {/* Price Types */}
+                              {procedure.procedurePriceTypes &&
+                                procedure.procedurePriceTypes.length > 0 && (
+                                  <div>
+                                    <h5 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
+                                      {t("priceTypes")}:
+                                    </h5>
+                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
+                                      {procedure.procedurePriceTypes.map(
+                                        (priceType: any) => (
+                                          <div
+                                            key={priceType.id}
+                                            className={`p-3 rounded-lg h-[120px] flex flex-col justify-between ${
+                                              priceType.isDefault
+                                                ? "bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/40 dark:to-pink-900/40 border border-purple-200 dark:border-purple-800"
+                                                : "bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border border-purple-100 dark:border-purple-900"
+                                            }`}
+                                          >
+                                            <div className="flex justify-between items-start">
+                                              <div
+                                                className="text-sm font-medium text-gray-600 dark:text-gray-300 truncate max-w-[70%]"
+                                                title={priceType.name}
+                                              >
+                                                {priceType.name}
+                                              </div>
+                                              {priceType.isDefault && (
+                                                <Badge className="bg-purple-500 dark:bg-purple-600 text-white text-xs shrink-0">
+                                                  <Check className="w-3 h-3 mr-1" />
+                                                  {t("default")}
+                                                </Badge>
+                                              )}
+                                            </div>
+                                            <div className="text-lg font-semibold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-500 dark:from-pink-300 dark:to-purple-300 mt-2">
+                                              {new Intl.NumberFormat(
+                                                "vi-VN"
+                                              ).format(priceType.price)}{" "}
+                                              đ
+                                            </div>
+                                            <div className="text-xs text-gray-500 dark:text-gray-400 mt-auto flex items-center">
+                                              <Clock className="w-3 h-3 mr-1 shrink-0" />
+                                              {priceType.duration || 30}{" "}
+                                              {t("minutes")}
+                                            </div>
+                                          </div>
+                                        )
+                                      )}
                                     </div>
-                                  ))}
-                                </div>
-                              </div>
-                            )}
+                                  </div>
+                                )}
+                            </div>
                           </div>
-                        </div>
-                      )}
-                    </motion.div>
-                  ))}
+                        )}
+                      </motion.div>
+                    )
+                  )}
                 </div>
               ) : (
                 // Update no procedures message
@@ -1026,7 +1209,9 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                   <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-1">
                     {t("noProcedures")}
                   </h3>
-                  <p className="text-gray-500 dark:text-gray-400">{t("noProcedureDescription")}</p>
+                  <p className="text-gray-500 dark:text-gray-400">
+                    {t("noProcedureDescription")}
+                  </p>
                 </div>
               )}
             </TabsContent>
@@ -1077,7 +1262,9 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                 </h3>
               </div>
 
-              <p className="text-gray-600 dark:text-gray-300 mb-6">{t("deleteConfirmDescription")}</p>
+              <p className="text-gray-600 dark:text-gray-300 mb-6">
+                {t("deleteConfirmDescription")}
+              </p>
 
               <div className="flex justify-end gap-3">
                 <button
@@ -1089,8 +1276,8 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
                 <button
                   onClick={() => {
                     if (procedureToDelete) {
-                      handleDeleteProcedure(procedureToDelete)
-                      setConfirmDialogOpen(false)
+                      handleDeleteProcedure(procedureToDelete);
+                      setConfirmDialogOpen(false);
                     }
                   }}
                   disabled={isDeleting}
@@ -1120,7 +1307,7 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
         .modal-content {
           overflow: hidden !important;
         }
-        
+
         .quill-content img {
           max-width: 100%;
           height: auto;
@@ -1128,7 +1315,7 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           border-radius: 0.5rem;
           display: block;
         }
-        
+
         .description-container.collapsed {
           display: -webkit-box;
           -webkit-line-clamp: 3;
@@ -1137,16 +1324,16 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           text-overflow: ellipsis;
           max-height: 4.5rem;
         }
-        
+
         .description-container.expanded {
           max-height: none;
           overflow: visible;
         }
-        
+
         .description-container {
           transition: max-height 0.3s ease;
         }
-        
+
         .description-container img {
           max-width: 100%;
           height: auto;
@@ -1154,20 +1341,20 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           border-radius: 0.5rem;
           display: inline-block;
         }
-        
+
         .quill-editor-container {
           position: relative;
           z-index: 30;
           margin-bottom: 80px; /* Significantly increased margin to create more space */
         }
-        
+
         .ql-toolbar.ql-snow,
         .ql-container.ql-snow {
           position: relative;
           z-index: 30;
           background-color: white;
         }
-        
+
         .ql-editor {
           min-height: 120px;
           max-height: 200px;
@@ -1178,35 +1365,35 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
         }
 
         /* Dark mode styles for Quill */
-        [data-theme='dark'] .ql-toolbar.ql-snow,
-        [data-theme='dark'] .ql-container.ql-snow {
+        [data-theme="dark"] .ql-toolbar.ql-snow,
+        [data-theme="dark"] .ql-container.ql-snow {
           background-color: #1f2937;
           border-color: #4b5563;
         }
-        
-        [data-theme='dark'] .ql-editor {
+
+        [data-theme="dark"] .ql-editor {
           background-color: #1f2937;
           color: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-picker-label {
+
+        [data-theme="dark"] .ql-picker-label {
           color: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-stroke {
+
+        [data-theme="dark"] .ql-stroke {
           stroke: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-fill {
+
+        [data-theme="dark"] .ql-fill {
           fill: #d1d5db;
         }
-        
-        [data-theme='dark'] .ql-picker-options {
+
+        [data-theme="dark"] .ql-picker-options {
           background-color: #1f2937;
           border-color: #4b5563;
         }
-        
-        [data-theme='dark'] .ql-picker-item {
+
+        [data-theme="dark"] .ql-picker-item {
           color: #d1d5db;
         }
 
@@ -1224,12 +1411,12 @@ export default function ViewServiceModal({ viewService, onClose, refetchService
           padding-top: 20px;
           border-top: 1px solid #f0f0f0;
         }
-        
-        [data-theme='dark'] .price-types-section {
+
+        [data-theme="dark"] .price-types-section {
           background-color: #1f2937;
           border-top: 1px solid #374151;
         }
       `}</style>
     </ModalService>
-  )
+  );
 }
diff --git a/src/components/clinicManager/wallet/withdrawal-request-modal.tsx b/src/components/clinicManager/wallet/withdrawal-request-modal.tsx
index e64baa0..a9e01e7 100644
--- a/src/components/clinicManager/wallet/withdrawal-request-modal.tsx
+++ b/src/components/clinicManager/wallet/withdrawal-request-modal.tsx
@@ -43,7 +43,6 @@ export default function WithdrawalRequestModal({
     useCreateWalletWithdrawMutation();
   const token = getAccessToken() as string;
   const { roleName } = GetDataByToken(token) as TokenData;
-  console.log("log xem: ", roleName.toLowerCase.toString());
   const [amount, setAmount] = useState("");
   const [description, setDescription] = useState("");
   const [amountError, setAmountError] = useState("");
@@ -129,7 +128,7 @@ export default function WithdrawalRequestModal({
         onSuccess();
       }
     } catch (error: any) {
-      console.error("Failed to submit withdrawal request:", error);
+      // console.error("Failed to submit withdrawal request:", error);
       toast.error(error.data.detail);
     }
   };
diff --git a/src/components/clinicStaff/customer-schedule/schedule-change-for-customer.tsx b/src/components/clinicStaff/customer-schedule/schedule-change-for-customer.tsx
index 495aa89..739ad82 100644
--- a/src/components/clinicStaff/customer-schedule/schedule-change-for-customer.tsx
+++ b/src/components/clinicStaff/customer-schedule/schedule-change-for-customer.tsx
@@ -439,7 +439,7 @@ export default function ScheduleFollowUpModal({
         isNext: false,
       }).unwrap();
 
-      toast.success("Follow-up appointment scheduled successfully");
+      toast.success(t("rescheduleSuccess"));
       onSuccess?.();
       onClose();
     } catch (error: any) {
diff --git a/src/components/clinicStaff/order/order-detail-dialog.tsx b/src/components/clinicStaff/order/order-detail-dialog.tsx
index 296c925..867c39c 100644
--- a/src/components/clinicStaff/order/order-detail-dialog.tsx
+++ b/src/components/clinicStaff/order/order-detail-dialog.tsx
@@ -238,7 +238,7 @@ export function OrderDetailDialog({
                     </span>
                   </div>
 
-                  <div className="flex justify-between items-center">
+                  {/* <div className="flex justify-between items-center">
                     <div className="flex items-center gap-1">
                       <Wallet className="h-4 w-4 text-muted-foreground" />
                       <span className="text-muted-foreground">
@@ -248,7 +248,7 @@ export function OrderDetailDialog({
                     <span className="font-medium">
                       {formatCurrency(remainingAmount)} đ
                     </span>
-                  </div>
+                  </div> */}
 
                   <Separator className="my-1" />
 
diff --git a/src/components/common/Admin/Sidebar.tsx b/src/components/common/Admin/Sidebar.tsx
index 7ca3065..7ed1409 100644
--- a/src/components/common/Admin/Sidebar.tsx
+++ b/src/components/common/Admin/Sidebar.tsx
@@ -77,7 +77,6 @@ const menuItems = {
       icon: LayoutDashboard,
     },
     { label: "user", path: "/systemAdmin/user", icon: User },
-    { label: "voucher", path: "/systemAdmin/voucher", icon: Ticket },
     { label: "package", path: "/systemAdmin/package", icon: Archive },
     {
       label: "withdrawalApproval",
diff --git a/src/components/common/Pagination/Pagination.tsx b/src/components/common/Pagination/Pagination.tsx
index 2de22bc..952f372 100644
--- a/src/components/common/Pagination/Pagination.tsx
+++ b/src/components/common/Pagination/Pagination.tsx
@@ -23,12 +23,18 @@ const Pagination: React.FC<PaginationProps> = ({
   const t = useTranslations("pagination");
   const totalPages = Math.ceil(totalCount / pageSize);
 
+  // Luôn hiển thị phân trang nếu có dữ liệu, bất kể đang ở trang nào
+  // Chỉ ẩn khi thực sự chỉ có 1 trang
+  if (totalCount <= pageSize && totalPages <= 1) {
+    return null;
+  }
+
   return (
     <div className="flex items-center justify-between mt-4">
       <button
         disabled={!hasPreviousPage}
         onClick={() => onPageChange(pageIndex - 1)}
-        className="px-4 py-2 rounded-lg text-gray-700 hover:text-gray-900 disabled:opacity-50"
+        className="px-4 py-2 rounded-lg text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
       >
         {t("previous")}
       </button>
@@ -40,7 +46,7 @@ const Pagination: React.FC<PaginationProps> = ({
       <button
         disabled={!hasNextPage}
         onClick={() => onPageChange(pageIndex + 1)}
-        className="px-4 py-2 rounded-lg text-gray-700 hover:text-gray-900 disabled:opacity-50"
+        className="px-4 py-2 rounded-lg text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
       >
         {t("next")}
       </button>
diff --git a/src/components/login/first-login-flow.tsx b/src/components/login/first-login-flow.tsx
index f6c7dc1..0406b38 100644
--- a/src/components/login/first-login-flow.tsx
+++ b/src/components/login/first-login-flow.tsx
@@ -1,6 +1,6 @@
 "use client";
 
-import { useState } from "react";
+import { useState, useEffect, useRef } from "react";
 import { useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
 import { z } from "zod";
@@ -30,16 +30,10 @@ import {
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { Label } from "@/components/ui/label";
 import { Stepper } from "./stepper";
-import {
-  clearCookieStorage,
-  getAccessToken,
-  GetDataByToken,
-  type TokenData,
-} from "@/utils";
-import { processAuthSuccess } from "@/features/auth/utils";
+import { clearCookieStorage } from "@/utils";
 import { useRouter } from "next/navigation";
 import { useDispatch } from "react-redux";
-import ConfirmationDialog from "@/components/ui/confirmation-dialog";
+import ConfirmationDialog from "@/components/ui/confirmation-dialogv2";
 
 interface FirstLoginFlowProps {
   onComplete: () => void;
@@ -54,8 +48,47 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
   const [isSubmitting, setIsSubmitting] = useState(false);
   const [error, setError] = useState<string | null>(null);
   const [showLogoutConfirmation, setShowLogoutConfirmation] = useState(false);
+  const [showSuccessDialog, setShowSuccessDialog] = useState(false);
+  // Add countdown timer state
+  const [countdown, setCountdown] = useState(5);
+  // Add ref to track if component is mounted
+  const isMounted = useRef(true);
 
   const [changePasswordStaff] = useChangePasswordStaffMutation();
+
+  // Set up countdown timer when success dialog is shown
+  useEffect(() => {
+    if (showSuccessDialog) {
+      // Reset countdown when dialog opens
+      setCountdown(5);
+
+      // Set up interval to decrement countdown
+      const timer = setInterval(() => {
+        setCountdown((prev) => {
+          // If countdown reaches 0, redirect
+          if (prev <= 1) {
+            clearInterval(timer);
+            handleSuccessConfirm();
+            return 0;
+          }
+          return prev - 1;
+        });
+      }, 1000);
+
+      // Clean up interval on unmount or when dialog closes
+      return () => {
+        clearInterval(timer);
+      };
+    }
+  }, [showSuccessDialog]);
+
+  // Clean up on unmount
+  useEffect(() => {
+    return () => {
+      isMounted.current = false;
+    };
+  }, []);
+
   // Handle logout
   const handleLogoutClick = () => {
     setShowLogoutConfirmation(true);
@@ -66,6 +99,18 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
     clearCookieStorage();
     router.push("/login");
   };
+
+  // Handle success dialog confirmation
+  const handleSuccessConfirm = () => {
+    // Only proceed if component is still mounted
+    if (isMounted.current) {
+      setShowSuccessDialog(false);
+      if (onComplete) onComplete();
+      clearCookieStorage();
+      router.push("/login");
+    }
+  };
+
   // Create schemas with translated error messages
   const clinicHoursSchema = z.object({
     workingTimeStart: z.string().min(1, t("enterWorkingTimeStart")),
@@ -138,41 +183,14 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
       // Call the API to change password
       const response = await changePasswordStaff(changePasswordData).unwrap();
 
+      // Show success toast
       toast.success(t("updateSuccess"), {
         position: "top-right",
         autoClose: 3000,
       });
 
-      // Get current user data from token
-      const token = getAccessToken();
-      // Add null check for token
-      const tokenData = token ? (GetDataByToken(token) as TokenData) : null;
-      const isFirstLogin = tokenData?.isFirstLogin || "";
-      if (token) {
-        try {
-          // Use processAuthSuccess to handle redirection based on user role
-          await processAuthSuccess({
-            loginResponse: { accessToken: token },
-            t,
-            dispatch,
-            router,
-            isFirstLogin,
-            // Don't skip redirection this time - we want to redirect properly
-          });
-
-          // If onComplete callback is provided, call it as well
-          if (onComplete) {
-            onComplete();
-          }
-        } catch (error) {
-          console.error("Error processing auth success:", error);
-          // Fallback to manual redirection if processAuthSuccess fails
-          router.push("/login");
-        }
-      } else {
-        // Fallback to manual redirection if token is not available
-        router.push("/login");
-      }
+      // Show success dialog
+      setShowSuccessDialog(true);
     } catch (error) {
       console.error("Password change error:", error);
 
@@ -193,8 +211,6 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
     }
   };
 
-  // Handle logout
-
   return (
     <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-b from-sky-50 to-white dark:from-gray-900 dark:to-gray-800 transition-colors duration-300">
       <div className="w-full max-w-md">
@@ -417,6 +433,8 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
           </CardFooter>
         </Card>
       </div>
+
+      {/* Logout Confirmation Dialog */}
       <ConfirmationDialog
         isOpen={showLogoutConfirmation}
         onClose={() => setShowLogoutConfirmation(false)}
@@ -429,6 +447,30 @@ export default function FirstLoginFlow({ onComplete }: FirstLoginFlowProps) {
         cancelButtonText={t("cancel") || "Hủy"}
         type="warning"
       />
+
+      {/* Success Dialog with Countdown */}
+      <ConfirmationDialog
+        isOpen={showSuccessDialog}
+        onClose={handleSuccessConfirm}
+        onConfirm={handleSuccessConfirm}
+        title={t("setupCompleteTitle")}
+        message={
+          <>
+            {t("setupCompleteMessage")}
+            <div className="mt-2 text-sm text-gray-500 dark:text-gray-400">
+              {t("redirectingIn")}{" "}
+              <span className="font-medium text-blue-600 dark:text-blue-400">
+                {countdown}
+              </span>{" "}
+              {t("seconds")}...
+            </div>
+          </>
+        }
+        confirmButtonText={`${t("login")} (${countdown})`}
+        cancelButtonText={null}
+        type="success"
+        icon={<CheckCircle2 className="w-6 h-6 text-green-600" />}
+      />
     </div>
   );
 }
diff --git a/src/components/systemAdmin/ModalService.tsx b/src/components/systemAdmin/ModalService.tsx
index 846fabe..b9de2b6 100644
--- a/src/components/systemAdmin/ModalService.tsx
+++ b/src/components/systemAdmin/ModalService.tsx
@@ -1,48 +1,56 @@
-"use client"
+"use client";
 
-import type React from "react"
+import type React from "react";
 
-import { useEffect, useRef } from "react"
-import { motion } from "framer-motion"
-import { X } from "lucide-react"
+import { useEffect, useRef } from "react";
+import { motion } from "framer-motion";
+import { X } from "lucide-react";
 
 interface ModalProps {
-  children: React.ReactNode
-  onClose: () => void
-  title?: string
-  customContent?: boolean
+  children: React.ReactNode;
+  onClose: () => void;
+  title?: string;
+  customContent?: boolean;
 }
 
-export default function ModalService({ children, onClose, title, customContent = false }: ModalProps) {
-  const modalRef = useRef<HTMLDivElement>(null)
+export default function ModalService({
+  children,
+  onClose,
+  title,
+  customContent = false,
+}: ModalProps) {
+  const modalRef = useRef<HTMLDivElement>(null);
 
   // Close modal when clicking outside
   useEffect(() => {
     const handleClickOutside = (event: MouseEvent) => {
-      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
-        onClose()
+      if (
+        modalRef.current &&
+        !modalRef.current.contains(event.target as Node)
+      ) {
+        onClose();
       }
-    }
+    };
 
-    document.addEventListener("mousedown", handleClickOutside)
+    document.addEventListener("mousedown", handleClickOutside);
     return () => {
-      document.removeEventListener("mousedown", handleClickOutside)
-    }
-  }, [onClose])
+      document.removeEventListener("mousedown", handleClickOutside);
+    };
+  }, [onClose]);
 
   // Close modal when pressing Escape key
   useEffect(() => {
     const handleEscapeKey = (event: KeyboardEvent) => {
       if (event.key === "Escape") {
-        onClose()
+        onClose();
       }
-    }
+    };
 
-    document.addEventListener("keydown", handleEscapeKey)
+    document.addEventListener("keydown", handleEscapeKey);
     return () => {
-      document.removeEventListener("keydown", handleEscapeKey)
-    }
-  }, [onClose])
+      document.removeEventListener("keydown", handleEscapeKey);
+    };
+  }, [onClose]);
 
   return (
     <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
@@ -52,32 +60,32 @@ export default function ModalService({ children, onClose, title, customContent =
         animate={{ opacity: 1, scale: 1 }}
         exit={{ opacity: 0, scale: 0.95 }}
         transition={{ type: "spring", damping: 20, stiffness: 300 }}
-        className="bg-white rounded-xl shadow-2xl w-full max-w-4xl relative"
+        className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-4xl relative overflow-hidden"
       >
-        {/* Nếu là customContent, chỉ render children mà không thêm padding hay overflow */}
+        {/* If customContent is true, only render children without adding padding or overflow */}
         {customContent ? (
-          <>
-           
-            {children}
-          </>
+          <>{children}</>
         ) : (
           <>
             {title && (
-              <div className="p-6 border-b border-gray-200">
-                <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
+              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
+                <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">
+                  {title}
+                </h2>
               </div>
             )}
             <button
               onClick={onClose}
-              className="absolute right-4 top-4 p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600"
+              className="absolute right-4 top-4 p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-300"
             >
               <X className="w-5 h-5" />
             </button>
-            <div className="p-6 max-h-[80vh] overflow-y-auto">{children}</div>
+            <div className="p-6 max-h-[80vh] overflow-y-auto rounded-b-xl">
+              {children}
+            </div>
           </>
         )}
       </motion.div>
     </div>
-  )
+  );
 }
-
diff --git a/src/components/ui/confirmation-dialogv2.tsx b/src/components/ui/confirmation-dialogv2.tsx
new file mode 100644
index 0000000..2b3ef2d
--- /dev/null
+++ b/src/components/ui/confirmation-dialogv2.tsx
@@ -0,0 +1,126 @@
+"use client";
+
+import type React from "react";
+import { motion } from "framer-motion";
+import { Trash2, AlertCircle, HelpCircle, CheckCircle } from "lucide-react";
+
+export type ConfirmationDialogProps = {
+  isOpen: boolean;
+  onClose: () => void;
+  onConfirm: () => void;
+  title?: string;
+  message?: React.ReactNode; // Changed from string to ReactNode to support JSX
+  confirmButtonText?: string;
+  cancelButtonText?: string | null;
+  isLoading?: boolean;
+  type?: "delete" | "warning" | "info" | "success";
+  icon?: React.ReactNode;
+};
+
+export default function ConfirmationDialog({
+  isOpen,
+  onClose,
+  onConfirm,
+  title = "Xác nhận",
+  message = "Bạn có chắc chắn muốn thực hiện hành động này?",
+  confirmButtonText = "Xác nhận",
+  cancelButtonText = "Hủy",
+  isLoading = false,
+  type = "delete",
+  icon,
+}: ConfirmationDialogProps) {
+  if (!isOpen) return null;
+
+  // Determine icon and colors based on type
+  const getTypeStyles = () => {
+    switch (type) {
+      case "delete":
+        return {
+          icon: icon || <Trash2 className="w-6 h-6 text-red-600" />,
+          iconBg: "bg-red-100",
+          buttonBg: "bg-red-600 hover:bg-red-700",
+          buttonText: confirmButtonText || "Xóa",
+        };
+      case "warning":
+        return {
+          icon: icon || <AlertCircle className="w-6 h-6 text-amber-600" />,
+          iconBg: "bg-amber-100",
+          buttonBg: "bg-amber-600 hover:bg-amber-700",
+          buttonText: confirmButtonText || "Tiếp tục",
+        };
+      case "success":
+        return {
+          icon: icon || <CheckCircle className="w-6 h-6 text-green-600" />,
+          iconBg: "bg-green-100",
+          buttonBg: "bg-green-600 hover:bg-green-700",
+          buttonText: confirmButtonText || "Đồng ý",
+        };
+      case "info":
+      default:
+        return {
+          icon: icon || <HelpCircle className="w-6 h-6 text-blue-600" />,
+          iconBg: "bg-blue-100",
+          buttonBg: "bg-blue-600 hover:bg-blue-700",
+          buttonText: confirmButtonText || "Đồng ý",
+        };
+    }
+  };
+
+  const { icon: typeIcon, iconBg, buttonBg, buttonText } = getTypeStyles();
+
+  return (
+    <div
+      className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
+      onClick={onClose}
+    >
+      <motion.div
+        initial={{ opacity: 0, scale: 0.9 }}
+        animate={{ opacity: 1, scale: 1 }}
+        exit={{ opacity: 0, scale: 0.9 }}
+        transition={{ duration: 0.2 }}
+        className="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-md w-full mx-4"
+        onClick={(e) => e.stopPropagation()}
+      >
+        <div className="flex items-center gap-3 mb-4">
+          <div className={`p-2 ${iconBg} dark:bg-opacity-20 rounded-full`}>
+            {typeIcon}
+          </div>
+          <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-100">
+            {title}
+          </h3>
+        </div>
+
+        <div className="text-gray-600 dark:text-gray-300 mb-6">{message}</div>
+
+        <div className="flex justify-end gap-3">
+          {cancelButtonText !== null && (
+            <button
+              onClick={onClose}
+              className="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 font-medium hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
+            >
+              {cancelButtonText}
+            </button>
+          )}
+          <button
+            onClick={onConfirm}
+            disabled={isLoading}
+            className={`px-4 py-2 rounded-lg ${buttonBg} text-white font-medium transition-colors flex items-center gap-2 disabled:opacity-70`}
+          >
+            {isLoading ? (
+              <>
+                <span className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></span>
+                Đang xử lý...
+              </>
+            ) : (
+              <>
+                {type === "delete" && <Trash2 className="w-4 h-4" />}
+                {type === "success" && <CheckCircle className="w-4 h-4" />}
+                {buttonText}
+              </>
+            )}
+          </button>
+        </div>
+      </motion.div>
+    </div>
+  );
+}
diff --git a/src/components/ui/tabs.tsx b/src/components/ui/tabs.tsx
index 0f4caeb..35f66dd 100644
--- a/src/components/ui/tabs.tsx
+++ b/src/components/ui/tabs.tsx
@@ -1,11 +1,11 @@
-"use client"
+"use client";
 
-import * as React from "react"
-import * as TabsPrimitive from "@radix-ui/react-tabs"
+import * as React from "react";
+import * as TabsPrimitive from "@radix-ui/react-tabs";
 
-import { cn } from "@/lib/utils"
+import { cn } from "@/lib/utils";
 
-const Tabs = TabsPrimitive.Root
+const Tabs = TabsPrimitive.Root;
 
 const TabsList = React.forwardRef<
   React.ElementRef<typeof TabsPrimitive.List>,
@@ -19,8 +19,8 @@ const TabsList = React.forwardRef<
     )}
     {...props}
   />
-))
-TabsList.displayName = TabsPrimitive.List.displayName
+));
+TabsList.displayName = TabsPrimitive.List.displayName;
 
 const TabsTrigger = React.forwardRef<
   React.ElementRef<typeof TabsPrimitive.Trigger>,
@@ -34,8 +34,8 @@ const TabsTrigger = React.forwardRef<
     )}
     {...props}
   />
-))
-TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
+));
+TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;
 
 const TabsContent = React.forwardRef<
   React.ElementRef<typeof TabsPrimitive.Content>,
@@ -49,7 +49,7 @@ const TabsContent = React.forwardRef<
     )}
     {...props}
   />
-))
-TabsContent.displayName = TabsPrimitive.Content.displayName
+));
+TabsContent.displayName = TabsPrimitive.Content.displayName;
 
-export { Tabs, TabsList, TabsTrigger, TabsContent }
+export { Tabs, TabsList, TabsTrigger, TabsContent };
diff --git a/src/config/i18n/messages/en/chat.ts b/src/config/i18n/messages/en/chat.ts
index b7856f3..ab5c9fd 100644
--- a/src/config/i18n/messages/en/chat.ts
+++ b/src/config/i18n/messages/en/chat.ts
@@ -23,4 +23,23 @@ export const chatMessages: Messages["chat"] = {
     enabled: "Notifications enabled",
     disabled: "Notifications disabled",
   },
+  actions: {
+    voiceCall: "Voice call",
+    videoCall: "Video call",
+    moreOptions: "More options",
+    attachFile: "Attach file",
+    sendImage: "Send image",
+  },
+  fileUpload: {
+    imageSuccess: "Image sent successfully",
+    fileSuccess: "File sent successfully",
+    imageError: "Could not send image",
+    fileError: "Could not send file",
+  },
+  fileTypes: {
+    image: "Image",
+    file: "File",
+    document: "Document",
+  },
+  uploading: "Uploading...",
 }
diff --git a/src/config/i18n/messages/en/clinicStaffService.ts b/src/config/i18n/messages/en/clinicStaffService.ts
index cd82bf0..0c61279 100644
--- a/src/config/i18n/messages/en/clinicStaffService.ts
+++ b/src/config/i18n/messages/en/clinicStaffService.ts
@@ -73,5 +73,9 @@ export const clinicStaffServicePageMessages: Messages["clinicStaffService"] = {
   certificate: "Certificate",
   noServiceDetailsTitle: "No Service Details Title",
   description:"Description",
-  certificates: "Certificates"
+  certificates: "Certificates",
+  off: "Off",
+  noDoctorsTitle: "No Doctors Available",
+  phone:"Phone Number",
+  noProceduresTitle: "No Procedures available"
 }
\ No newline at end of file
diff --git a/src/config/i18n/messages/en/customerSchedule.ts b/src/config/i18n/messages/en/customerSchedule.ts
index 2fdbfef..0f7d2c2 100644
--- a/src/config/i18n/messages/en/customerSchedule.ts
+++ b/src/config/i18n/messages/en/customerSchedule.ts
@@ -171,4 +171,5 @@ export const customerScheduleMessage: Messages["customerSchedule"] = {
     "{walletAmount} will be deducted from your wallet. Please select a payment method for the remaining {remainingAmount}.",
   confirmPayment: "Confirm Payment",
   back: "Back",
+  rescheduleSuccess: "Reschedule successful",
 };
diff --git a/src/config/i18n/messages/en/login.ts b/src/config/i18n/messages/en/login.ts
index 84d0679..c14d67a 100644
--- a/src/config/i18n/messages/en/login.ts
+++ b/src/config/i18n/messages/en/login.ts
@@ -58,7 +58,7 @@ export const loginMessage: Messages["login"] = {
   processing: "Processing...",
   updateSuccess: "Information updated successfully!",
   updateError: "An error occurred while updating information",
-  
+
   // Validation error messages
   requiredField: "This field is required",
   enterWorkingTimeStart: "Please enter working start time",
@@ -72,4 +72,25 @@ export const loginMessage: Messages["login"] = {
   logoutConfirmation: "Logout Confirmation",
   logoutConfirmationMessage: "Do you want to logout?",
   cancel: "Cancel",
+
+  // New fields for success dialog and auto-redirect
+  setupCompleteTitle: "Account Setup Complete",
+  setupCompleteMessage:
+    "Your account setup has been completed successfully. Please log in again with your new password.",
+  autoRedirectMessage: "Automatically redirecting in {seconds} seconds...",
+  login: "Login",
+  redirectingIn: "Redirecting in",
+  seconds: "seconds",
+
+  // Confirmation dialog common translations
+  confirmAction: "Confirm Action",
+  confirmActionMessage: "Are you sure you want to perform this action?",
+  confirmDelete: "Confirm Delete",
+  confirmDeleteMessage: "Are you sure you want to delete this item? This action cannot be undone.",
+  confirmWarning: "Warning",
+  confirmWarningMessage: "Are you sure you want to proceed?",
+  confirmInfo: "Information",
+  confirmInfoMessage: "Please confirm to continue.",
+  confirmSuccess: "Success",
+  confirmSuccessMessage: "The operation was completed successfully.",
 }
diff --git a/src/config/i18n/messages/en/package.ts b/src/config/i18n/messages/en/package.ts
index e604b7b..cc56144 100644
--- a/src/config/i18n/messages/en/package.ts
+++ b/src/config/i18n/messages/en/package.ts
@@ -110,7 +110,7 @@ export const packageMessages: Messages["package"] = {
     packageName: "Package Name",
     description: "Description",
     price: "Price (USD)",
-    duration: "Duration (Months)",
+    duration: "Duration (Days)",
     limitBranches: "Branch Limit",
     limitLiveStream: "Live Stream Limit",
     priceBranchAddition: "Price Per Additional Branch",
diff --git a/src/config/i18n/messages/en/wallet.ts b/src/config/i18n/messages/en/wallet.ts
index 8d9cc0d..9da4526 100644
--- a/src/config/i18n/messages/en/wallet.ts
+++ b/src/config/i18n/messages/en/wallet.ts
@@ -79,6 +79,7 @@ export const walletMessages: Messages["wallet"] = {
     pending: "Pending",
     rejected: "Rejected",
     waitingForPayment: "Waiting For Payment",
+    waitingApproval:"Waiting Approval"
   },
   transactionDetails: {
     title: "Transaction Details",
diff --git a/src/config/i18n/messages/types/chat.ts b/src/config/i18n/messages/types/chat.ts
index a6bf78a..f24429a 100644
--- a/src/config/i18n/messages/types/chat.ts
+++ b/src/config/i18n/messages/types/chat.ts
@@ -1,24 +1,43 @@
 export type chatMessages = {
-    title: string
-    search: string
-    noResults: string
-    online: string
-    noMessages: string
-    startConversation: string
-    noConversations: string
-    selectConversation: string
-    enableNotifications: string
-    newMessages: string
-    clickToView: string
-    typeMessage: string
-    send: string
-    today: string
-    yesterday: string
-    inputPlaceholder: string
-    loadingMessages: string
-    loadingConversations: string
-    notifications: {
-      enabled: string
-      disabled: string
-    }
+  title: string
+  search: string
+  noResults: string
+  online: string
+  noMessages: string
+  startConversation: string
+  noConversations: string
+  selectConversation: string
+  enableNotifications: string
+  newMessages: string
+  clickToView: string
+  typeMessage: string
+  send: string
+  today: string
+  yesterday: string
+  inputPlaceholder: string
+  loadingMessages: string
+  loadingConversations: string
+  notifications: {
+    enabled: string
+    disabled: string
+  }
+  actions: {
+    voiceCall: string
+    videoCall: string
+    moreOptions: string
+    attachFile: string
+    sendImage: string
+  }
+  fileUpload: {
+    imageSuccess: string
+    fileSuccess: string
+    imageError: string
+    fileError: string
+  }
+  fileTypes: {
+    image: string
+    file: string
+    document: string
+  }
+  uploading: string
   }
\ No newline at end of file
diff --git a/src/config/i18n/messages/types/clinicStaffService.ts b/src/config/i18n/messages/types/clinicStaffService.ts
index 55974e2..c56e2ea 100644
--- a/src/config/i18n/messages/types/clinicStaffService.ts
+++ b/src/config/i18n/messages/types/clinicStaffService.ts
@@ -73,6 +73,9 @@ export type clinicStaffServicePageMessages = {
     noServiceDetailsTitle: string
     description: string
     certificates: string
-
+    off: string
+    noDoctorsTitle: string
+    phone: string
+    noProceduresTitle: string
   }
   
\ No newline at end of file
diff --git a/src/config/i18n/messages/types/customerSchedule.ts b/src/config/i18n/messages/types/customerSchedule.ts
index aa4ea95..01b73d7 100644
--- a/src/config/i18n/messages/types/customerSchedule.ts
+++ b/src/config/i18n/messages/types/customerSchedule.ts
@@ -157,4 +157,5 @@ export type customerScheduleTranslations = {
   partialWalletPaymentInfo: string
   confirmPayment: string
   back: string
+  rescheduleSuccess: string
 }
diff --git a/src/config/i18n/messages/types/login.ts b/src/config/i18n/messages/types/login.ts
index 95f1aa7..3ce44dd 100644
--- a/src/config/i18n/messages/types/login.ts
+++ b/src/config/i18n/messages/types/login.ts
@@ -70,4 +70,25 @@ export type LoginTranslations = {
   logoutConfirmation: string
   logoutConfirmationMessage: string
   cancel: string
+
+  // New fields for success dialog and auto-redirect
+  setupCompleteTitle: string
+  setupCompleteMessage: string
+  autoRedirectMessage: string
+  login: string
+  redirectingIn: string
+  seconds: string
+
+  // Confirmation dialog common translations
+  confirmAction: string
+  confirmActionMessage: string
+  confirmDelete: string
+  confirmDeleteMessage: string
+  confirmWarning: string
+  confirmWarningMessage: string
+  confirmInfo: string
+  confirmInfoMessage: string
+  confirmSuccess: string
+  confirmSuccessMessage: string
+
 }
diff --git a/src/config/i18n/messages/types/wallet.ts b/src/config/i18n/messages/types/wallet.ts
index fc7e391..3f3ff43 100644
--- a/src/config/i18n/messages/types/wallet.ts
+++ b/src/config/i18n/messages/types/wallet.ts
@@ -77,6 +77,7 @@ export type walletMessages = {
       pending: string
       rejected: string
       waitingForPayment: string
+      waitingApproval: string
     }
     transactionDetails: {
       title: string
diff --git a/src/config/i18n/messages/vi/chat.ts b/src/config/i18n/messages/vi/chat.ts
index 011db1f..d870735 100644
--- a/src/config/i18n/messages/vi/chat.ts
+++ b/src/config/i18n/messages/vi/chat.ts
@@ -23,4 +23,23 @@ export const chatMessages: Messages["chat"] = {
     enabled: "Đã bật thông báo",
     disabled: "Đã tắt thông báo",
   },
+  actions: {
+    voiceCall: "Gọi thoại",
+    videoCall: "Gọi video",
+    moreOptions: "Tùy chọn khác",
+    attachFile: "Đính kèm tệp",
+    sendImage: "Gửi hình ảnh",
+  },
+  fileUpload: {
+    imageSuccess: "Hình ảnh đã được gửi thành công",
+    fileSuccess: "Tệp tin đã được gửi thành công",
+    imageError: "Không thể gửi hình ảnh",
+    fileError: "Không thể gửi tệp tin",
+  },
+  fileTypes: {
+    image: "Hình ảnh",
+    file: "Tệp tin",
+    document: "Tài liệu",
+  },
+  uploading: "Đang tải lên...",
 }
diff --git a/src/config/i18n/messages/vi/clinicStaffService.ts b/src/config/i18n/messages/vi/clinicStaffService.ts
index 83bab69..94c23fa 100644
--- a/src/config/i18n/messages/vi/clinicStaffService.ts
+++ b/src/config/i18n/messages/vi/clinicStaffService.ts
@@ -75,6 +75,9 @@ export const clinicStaffServicePageMessages: Messages["clinicStaffService"] = {
   certificate: "Chứng chỉ",
   noServiceDetailsTitle:"không có Chi tiết dịch vụ",
   description: "Mô tả",
-  certificates: "Chứng chỉ"
-  
+  certificates: "Chứng chỉ",
+  off:"Giảm giá",
+  noDoctorsTitle:"Không có bác sĩ",
+  phone: "SĐT",
+  noProceduresTitle: "Không có giai đoạn"
 }
diff --git a/src/config/i18n/messages/vi/customerSchedule.ts b/src/config/i18n/messages/vi/customerSchedule.ts
index 1ba2d0c..6bed2f9 100644
--- a/src/config/i18n/messages/vi/customerSchedule.ts
+++ b/src/config/i18n/messages/vi/customerSchedule.ts
@@ -124,7 +124,7 @@ export const customerScheduleMessage: Messages["customerSchedule"] = {
   proceedToCheckout: "Tiến hành thanh toán",
   // Next schedule notification translations
   followUpRequired: "Yêu cầu theo dõi",
-  multipleFollowUpsNeeded: "{count} bệnh nhân cần lên lịch cho cuộc hẹn tiếp theo.",
+  multipleFollowUpsNeeded: "{count} khách hàng cần lên lịch cho cuộc hẹn tiếp theo.",
   singleFollowUpNeeded: "{name} cần lên lịch cho cuộc hẹn tiếp theo.",
   // Follow-up selection modal translations
   selectAppointmentForFollowUp: "Chọn cuộc hẹn để theo dõi",
@@ -162,4 +162,6 @@ export const customerScheduleMessage: Messages["customerSchedule"] = {
     "{walletAmount} sẽ được trừ từ ví của bạn. Vui lòng chọn phương thức thanh toán cho số tiền còn lại {remainingAmount}.",
   confirmPayment: "Xác nhận thanh toán",
   back: "Quay lại",
+
+  rescheduleSuccess: "Đặt lại lịch thành công",
 }
diff --git a/src/config/i18n/messages/vi/login.ts b/src/config/i18n/messages/vi/login.ts
index d702659..dbcdcfe 100644
--- a/src/config/i18n/messages/vi/login.ts
+++ b/src/config/i18n/messages/vi/login.ts
@@ -72,4 +72,24 @@ export const loginMessage: Messages["login"] = {
   logoutConfirmation: "Xác nhận đăng xuất",
   logoutConfirmationMessage: "Bạn có chắc chắn muốn đăng xuất?",
   cancel: "Hủy",
+
+  // New fields for success dialog and auto-redirect
+  setupCompleteTitle: "Thiết lập tài khoản thành công",
+  setupCompleteMessage: "Các bước thiết lập tài khoản đã hoàn tất. Vui lòng đăng nhập lại với mật khẩu mới của bạn.",
+  autoRedirectMessage: "Tự động chuyển hướng sau {seconds} giây...",
+  login: "Đăng nhập",
+  redirectingIn: "Tự động chuyển hướng sau",
+  seconds: "giây",
+
+  // Confirmation dialog common translations
+  confirmAction: "Xác nhận",
+  confirmActionMessage: "Bạn có chắc chắn muốn thực hiện hành động này?",
+  confirmDelete: "Xác nhận xóa",
+  confirmDeleteMessage: "Bạn có chắc chắn muốn xóa mục này? Hành động này không thể hoàn tác.",
+  confirmWarning: "Cảnh báo",
+  confirmWarningMessage: "Bạn có chắc chắn muốn tiếp tục?",
+  confirmInfo: "Thông báo",
+  confirmInfoMessage: "Vui lòng xác nhận để tiếp tục.",
+  confirmSuccess: "Thành công",
+  confirmSuccessMessage: "Thao tác đã được thực hiện thành công.",
 }
diff --git a/src/config/i18n/messages/vi/package.ts b/src/config/i18n/messages/vi/package.ts
index 20dcbf0..2938e1f 100644
--- a/src/config/i18n/messages/vi/package.ts
+++ b/src/config/i18n/messages/vi/package.ts
@@ -110,7 +110,7 @@ export const packageMessages: Messages["package"] = {
     packageName: "Tên Gói dịch vụ",
     description: "Mô tả",
     price: "Giá (VND)",
-    duration: "Thời hạn (Tháng)",
+    duration: "Thời hạn (Ngày)",
     limitBranches: "Giới hạn Chi nhánh",
     limitLiveStream: "Giới hạn Live Stream",
     priceBranchAddition: "Giá cho mỗi Chi nhánh bổ sung",
diff --git a/src/config/i18n/messages/vi/wallet.ts b/src/config/i18n/messages/vi/wallet.ts
index 192f51e..4e8998c 100644
--- a/src/config/i18n/messages/vi/wallet.ts
+++ b/src/config/i18n/messages/vi/wallet.ts
@@ -79,6 +79,7 @@ export const walletMessages: Messages["wallet"] = {
       pending: "Đang chờ",
       rejected: "Từ chối",
       waitingForPayment: "Đang chờ thanh toán",
+      waitingApproval: "Chờ phê duyệt"
     },
     transactionDetails: {
       title: "Chi tiết Giao dịch",
diff --git a/src/constants/route.constant.ts b/src/constants/route.constant.ts
index e04e796..211da36 100644
--- a/src/constants/route.constant.ts
+++ b/src/constants/route.constant.ts
@@ -91,6 +91,7 @@ export const systemStaffRoutes = {
   CLINICS: `${privateSystemStaffPath}/clinic`,
   PROFILES: `${privateSystemStaffPath}/profile`,
   BRANCHES: `${privateSystemStaffPath}/branch-request`,
+  POLICIES: `${privateSystemStaffPath}/policy`,
 };
 
 export const publicRoutes = {
-- 
2.42.0.windows.2

